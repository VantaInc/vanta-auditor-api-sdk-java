/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api;

import static com.vanta.vanta_auditor_api.operations.Operations.RequestOperation;

import com.vanta.vanta_auditor_api.models.components.AddCommentInput;
import com.vanta.vanta_auditor_api.models.components.AuditEvidenceUpdateInput;
import com.vanta.vanta_auditor_api.models.components.CreateCustomControlInput;
import com.vanta.vanta_auditor_api.models.components.CreateCustomEvidenceRequestInput;
import com.vanta.vanta_auditor_api.models.operations.CreateCommentForAuditEvidenceRequest;
import com.vanta.vanta_auditor_api.models.operations.CreateCommentForAuditEvidenceRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.CreateCommentForAuditEvidenceResponse;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomControlRequest;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomControlRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomControlResponse;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomEvidenceRequestRequest;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomEvidenceRequestRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomEvidenceRequestResponse;
import com.vanta.vanta_auditor_api.models.operations.ListAuditCommentsRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditCommentsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.ListAuditCommentsResponse;
import com.vanta.vanta_auditor_api.models.operations.ListAuditControlsRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditControlsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.ListAuditControlsResponse;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceResponse;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceUrlsRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceUrlsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceUrlsResponse;
import com.vanta.vanta_auditor_api.models.operations.ListAuditsRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.ListAuditsResponse;
import com.vanta.vanta_auditor_api.models.operations.UpdateAuditEvidenceRequest;
import com.vanta.vanta_auditor_api.models.operations.UpdateAuditEvidenceRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.UpdateAuditEvidenceResponse;
import com.vanta.vanta_auditor_api.operations.CreateCommentForAuditEvidenceOperation;
import com.vanta.vanta_auditor_api.operations.CreateCustomControlOperation;
import com.vanta.vanta_auditor_api.operations.CreateCustomEvidenceRequestOperation;
import com.vanta.vanta_auditor_api.operations.ListAuditCommentsOperation;
import com.vanta.vanta_auditor_api.operations.ListAuditControlsOperation;
import com.vanta.vanta_auditor_api.operations.ListAuditEvidenceOperation;
import com.vanta.vanta_auditor_api.operations.ListAuditEvidenceUrlsOperation;
import com.vanta.vanta_auditor_api.operations.ListAuditsOperation;
import com.vanta.vanta_auditor_api.operations.UpdateAuditEvidenceOperation;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;


public class Audits {
    private final SDKConfiguration sdkConfiguration;

    Audits(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List audits
     * 
     * <p>Returns a paginated list of audits scoped to the audit firm.
     * 
     * @return The call builder
     */
    public ListAuditsRequestBuilder list() {
        return new ListAuditsRequestBuilder(sdkConfiguration);
    }

    /**
     * List audits
     * 
     * <p>Returns a paginated list of audits scoped to the audit firm.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditsResponse listDirect() throws Exception {
        return list(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * List audits
     * 
     * <p>Returns a paginated list of audits scoped to the audit firm.
     * 
     * @param pageSize 
     * @param pageCursor 
     * @param changedSinceDate Includes all audits that have changed since changedSinceDate.
     * @param isActiveAudit Includes only audits with no audit report uploaded
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditsResponse list(
            Optional<Integer> pageSize, Optional<String> pageCursor,
            Optional<OffsetDateTime> changedSinceDate, Optional<Boolean> isActiveAudit) throws Exception {
        ListAuditsRequest request =
            ListAuditsRequest
                .builder()
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .changedSinceDate(changedSinceDate)
                .isActiveAudit(isActiveAudit)
                .build();
        RequestOperation<ListAuditsRequest, ListAuditsResponse> operation
              = new ListAuditsOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List audit evidence url
     * 
     * <p>Returns a paginated list of evidence urls for an audit. This endpoint should be called whenever an
     * evidence is created or has a statusUpdatedAt field that is more recent than the most recent polling event.
     * 
     * @return The call builder
     */
    public ListAuditEvidenceUrlsRequestBuilder getEvidenceUrls() {
        return new ListAuditEvidenceUrlsRequestBuilder(sdkConfiguration);
    }

    /**
     * List audit evidence url
     * 
     * <p>Returns a paginated list of evidence urls for an audit. This endpoint should be called whenever an
     * evidence is created or has a statusUpdatedAt field that is more recent than the most recent polling event.
     * 
     * @param auditId 
     * @param auditEvidenceId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditEvidenceUrlsResponse getEvidenceUrls(String auditId, String auditEvidenceId) throws Exception {
        return getEvidenceUrls(auditId, auditEvidenceId, Optional.empty(),
            Optional.empty());
    }

    /**
     * List audit evidence url
     * 
     * <p>Returns a paginated list of evidence urls for an audit. This endpoint should be called whenever an
     * evidence is created or has a statusUpdatedAt field that is more recent than the most recent polling event.
     * 
     * @param auditId 
     * @param auditEvidenceId 
     * @param pageSize 
     * @param pageCursor 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditEvidenceUrlsResponse getEvidenceUrls(
            String auditId, String auditEvidenceId,
            Optional<Integer> pageSize, Optional<String> pageCursor) throws Exception {
        ListAuditEvidenceUrlsRequest request =
            ListAuditEvidenceUrlsRequest
                .builder()
                .auditId(auditId)
                .auditEvidenceId(auditEvidenceId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .build();
        RequestOperation<ListAuditEvidenceUrlsRequest, ListAuditEvidenceUrlsResponse> operation
              = new ListAuditEvidenceUrlsOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List audit evidence
     * 
     * <p>Returns a paginated list of evidence for an audit.
     * 
     * @return The call builder
     */
    public ListAuditEvidenceRequestBuilder listEvidence() {
        return new ListAuditEvidenceRequestBuilder(sdkConfiguration);
    }

    /**
     * List audit evidence
     * 
     * <p>Returns a paginated list of evidence for an audit.
     * 
     * @param auditId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditEvidenceResponse listEvidence(String auditId) throws Exception {
        return listEvidence(auditId, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * List audit evidence
     * 
     * <p>Returns a paginated list of evidence for an audit.
     * 
     * @param auditId 
     * @param pageSize 
     * @param pageCursor 
     * @param changedSinceDate Includes all audit evidence that have changed since changedSinceDate.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditEvidenceResponse listEvidence(
            String auditId, Optional<Integer> pageSize,
            Optional<String> pageCursor, Optional<OffsetDateTime> changedSinceDate) throws Exception {
        ListAuditEvidenceRequest request =
            ListAuditEvidenceRequest
                .builder()
                .auditId(auditId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .changedSinceDate(changedSinceDate)
                .build();
        RequestOperation<ListAuditEvidenceRequest, ListAuditEvidenceResponse> operation
              = new ListAuditEvidenceOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List audit comments
     * 
     * <p>Returns a paginated list of comments for an audit.
     * 
     * @return The call builder
     */
    public ListAuditCommentsRequestBuilder listComments() {
        return new ListAuditCommentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List audit comments
     * 
     * <p>Returns a paginated list of comments for an audit.
     * 
     * @param auditId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditCommentsResponse listComments(String auditId) throws Exception {
        return listComments(auditId, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * List audit comments
     * 
     * <p>Returns a paginated list of comments for an audit.
     * 
     * @param auditId 
     * @param pageSize 
     * @param pageCursor 
     * @param changedSinceDate Includes all comments that have changed since changedSinceDate.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditCommentsResponse listComments(
            String auditId, Optional<Integer> pageSize,
            Optional<String> pageCursor, Optional<OffsetDateTime> changedSinceDate) throws Exception {
        ListAuditCommentsRequest request =
            ListAuditCommentsRequest
                .builder()
                .auditId(auditId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .changedSinceDate(changedSinceDate)
                .build();
        RequestOperation<ListAuditCommentsRequest, ListAuditCommentsResponse> operation
              = new ListAuditCommentsOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List audit controls
     * 
     * <p>Returns a paginated list of controls for an audit.
     * 
     * @return The call builder
     */
    public ListAuditControlsRequestBuilder listControls() {
        return new ListAuditControlsRequestBuilder(sdkConfiguration);
    }

    /**
     * List audit controls
     * 
     * <p>Returns a paginated list of controls for an audit.
     * 
     * @param auditId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditControlsResponse listControls(String auditId) throws Exception {
        return listControls(auditId, Optional.empty(), Optional.empty());
    }

    /**
     * List audit controls
     * 
     * <p>Returns a paginated list of controls for an audit.
     * 
     * @param auditId 
     * @param pageSize 
     * @param pageCursor 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditControlsResponse listControls(
            String auditId, Optional<Integer> pageSize,
            Optional<String> pageCursor) throws Exception {
        ListAuditControlsRequest request =
            ListAuditControlsRequest
                .builder()
                .auditId(auditId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .build();
        RequestOperation<ListAuditControlsRequest, ListAuditControlsResponse> operation
              = new ListAuditControlsOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a comment for audit evidence
     * 
     * <p>Create a comment in Vanta for a piece of evidence.
     * 
     * @return The call builder
     */
    public CreateCommentForAuditEvidenceRequestBuilder createCommentForEvidence() {
        return new CreateCommentForAuditEvidenceRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a comment for audit evidence
     * 
     * <p>Create a comment in Vanta for a piece of evidence.
     * 
     * @param auditId 
     * @param auditEvidenceId 
     * @param addCommentInput 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCommentForAuditEvidenceResponse createCommentForEvidence(
            String auditId, String auditEvidenceId,
            AddCommentInput addCommentInput) throws Exception {
        CreateCommentForAuditEvidenceRequest request =
            CreateCommentForAuditEvidenceRequest
                .builder()
                .auditId(auditId)
                .auditEvidenceId(auditEvidenceId)
                .addCommentInput(addCommentInput)
                .build();
        RequestOperation<CreateCommentForAuditEvidenceRequest, CreateCommentForAuditEvidenceResponse> operation
              = new CreateCommentForAuditEvidenceOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update audit evidence
     * 
     * <p>Update audit evidence.
     * 
     * @return The call builder
     */
    public UpdateAuditEvidenceRequestBuilder updateEvidence() {
        return new UpdateAuditEvidenceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update audit evidence
     * 
     * <p>Update audit evidence.
     * 
     * @param auditId 
     * @param auditEvidenceId 
     * @param auditEvidenceUpdateInput 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateAuditEvidenceResponse updateEvidence(
            String auditId, String auditEvidenceId,
            AuditEvidenceUpdateInput auditEvidenceUpdateInput) throws Exception {
        UpdateAuditEvidenceRequest request =
            UpdateAuditEvidenceRequest
                .builder()
                .auditId(auditId)
                .auditEvidenceId(auditEvidenceId)
                .auditEvidenceUpdateInput(auditEvidenceUpdateInput)
                .build();
        RequestOperation<UpdateAuditEvidenceRequest, UpdateAuditEvidenceResponse> operation
              = new UpdateAuditEvidenceOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a custom evidence request for an audit
     * 
     * <p>Create a custom evidence request for an audit.
     * 
     * @return The call builder
     */
    public CreateCustomEvidenceRequestRequestBuilder createCustomEvidenceRequest() {
        return new CreateCustomEvidenceRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a custom evidence request for an audit
     * 
     * <p>Create a custom evidence request for an audit.
     * 
     * @param auditId 
     * @param createCustomEvidenceRequestInput 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCustomEvidenceRequestResponse createCustomEvidenceRequest(String auditId, CreateCustomEvidenceRequestInput createCustomEvidenceRequestInput) throws Exception {
        CreateCustomEvidenceRequestRequest request =
            CreateCustomEvidenceRequestRequest
                .builder()
                .auditId(auditId)
                .createCustomEvidenceRequestInput(createCustomEvidenceRequestInput)
                .build();
        RequestOperation<CreateCustomEvidenceRequestRequest, CreateCustomEvidenceRequestResponse> operation
              = new CreateCustomEvidenceRequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a custom control for an audit
     * 
     * <p>Create a custom control for an audit.
     * 
     * @return The call builder
     */
    public CreateCustomControlRequestBuilder createCustomControl() {
        return new CreateCustomControlRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a custom control for an audit
     * 
     * <p>Create a custom control for an audit.
     * 
     * @param auditId 
     * @param createCustomControlInput 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCustomControlResponse createCustomControl(String auditId, CreateCustomControlInput createCustomControlInput) throws Exception {
        CreateCustomControlRequest request =
            CreateCustomControlRequest
                .builder()
                .auditId(auditId)
                .createCustomControlInput(createCustomControlInput)
                .build();
        RequestOperation<CreateCustomControlRequest, CreateCustomControlResponse> operation
              = new CreateCustomControlOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
