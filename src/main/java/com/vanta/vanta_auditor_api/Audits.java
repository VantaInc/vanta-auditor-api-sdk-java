/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vanta.vanta_auditor_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.vanta.vanta_auditor_api.models.components.AddCommentInput;
import com.vanta.vanta_auditor_api.models.components.AuditEvidenceUpdateInput;
import com.vanta.vanta_auditor_api.models.components.Comment;
import com.vanta.vanta_auditor_api.models.components.Control;
import com.vanta.vanta_auditor_api.models.components.CreateCustomControlInput;
import com.vanta.vanta_auditor_api.models.components.CreateCustomEvidenceRequestInput;
import com.vanta.vanta_auditor_api.models.components.CustomEvidenceRequest;
import com.vanta.vanta_auditor_api.models.components.Evidence;
import com.vanta.vanta_auditor_api.models.components.PaginatedResponseAudit;
import com.vanta.vanta_auditor_api.models.components.PaginatedResponseAuditorControl;
import com.vanta.vanta_auditor_api.models.components.PaginatedResponseComment;
import com.vanta.vanta_auditor_api.models.components.PaginatedResponseEvidence;
import com.vanta.vanta_auditor_api.models.components.PaginatedResponseEvidenceUrl;
import com.vanta.vanta_auditor_api.models.errors.APIException;
import com.vanta.vanta_auditor_api.models.operations.CreateCommentForAuditEvidenceRequest;
import com.vanta.vanta_auditor_api.models.operations.CreateCommentForAuditEvidenceRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.CreateCommentForAuditEvidenceResponse;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomControlRequest;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomControlRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomControlResponse;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomEvidenceRequestRequest;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomEvidenceRequestRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomEvidenceRequestResponse;
import com.vanta.vanta_auditor_api.models.operations.ListAuditCommentsRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditCommentsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.ListAuditCommentsResponse;
import com.vanta.vanta_auditor_api.models.operations.ListAuditControlsRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditControlsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.ListAuditControlsResponse;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceResponse;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceUrlsRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceUrlsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceUrlsResponse;
import com.vanta.vanta_auditor_api.models.operations.ListAuditsRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.ListAuditsResponse;
import com.vanta.vanta_auditor_api.models.operations.SDKMethodInterfaces.*;
import com.vanta.vanta_auditor_api.models.operations.UpdateAuditEvidenceRequest;
import com.vanta.vanta_auditor_api.models.operations.UpdateAuditEvidenceRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.UpdateAuditEvidenceResponse;
import com.vanta.vanta_auditor_api.utils.HTTPClient;
import com.vanta.vanta_auditor_api.utils.HTTPRequest;
import com.vanta.vanta_auditor_api.utils.Hook.AfterErrorContextImpl;
import com.vanta.vanta_auditor_api.utils.Hook.AfterSuccessContextImpl;
import com.vanta.vanta_auditor_api.utils.Hook.BeforeRequestContextImpl;
import com.vanta.vanta_auditor_api.utils.SerializedBody;
import com.vanta.vanta_auditor_api.utils.Utils.JsonShape;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional; 

public class Audits implements
            MethodCallListAudits,
            MethodCallListAuditEvidenceUrls,
            MethodCallListAuditEvidence,
            MethodCallListAuditComments,
            MethodCallListAuditControls,
            MethodCallCreateCommentForAuditEvidence,
            MethodCallUpdateAuditEvidence,
            MethodCallCreateCustomEvidenceRequest,
            MethodCallCreateCustomControl {

    private final SDKConfiguration sdkConfiguration;

    Audits(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * List audits
     * Returns a paginated list of audits scoped to the audit firm.
     * @return The call builder
     */
    public ListAuditsRequestBuilder list() {
        return new ListAuditsRequestBuilder(this);
    }

    /**
     * List audits
     * Returns a paginated list of audits scoped to the audit firm.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditsResponse listDirect() throws Exception {
        return list(Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * List audits
     * Returns a paginated list of audits scoped to the audit firm.
     * @param pageSize
     * @param pageCursor
     * @param changedSinceDate Includes all audits that have changed since changedSinceDate.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditsResponse list(
            Optional<Integer> pageSize,
            Optional<String> pageCursor,
            Optional<OffsetDateTime> changedSinceDate) throws Exception {
        ListAuditsRequest request =
            ListAuditsRequest
                .builder()
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .changedSinceDate(changedSinceDate)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/audits");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                ListAuditsRequest.class,
                request, 
                null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "ListAudits", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "ListAudits",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "ListAudits",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "ListAudits",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListAuditsResponse.Builder _resBuilder = 
            ListAuditsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListAuditsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginatedResponseAudit _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PaginatedResponseAudit>() {});
                _res.withPaginatedResponseAudit(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * List audit evidence url
     * Returns a paginated list of evidence urls for an audit.
     * @return The call builder
     */
    public ListAuditEvidenceUrlsRequestBuilder listEvidenceUrls() {
        return new ListAuditEvidenceUrlsRequestBuilder(this);
    }

    /**
     * List audit evidence url
     * Returns a paginated list of evidence urls for an audit.
     * @param auditId
     * @param auditEvidenceId
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditEvidenceUrlsResponse listEvidenceUrls(
            String auditId,
            String auditEvidenceId) throws Exception {
        return listEvidenceUrls(auditId, auditEvidenceId, Optional.empty(), Optional.empty());
    }
    
    /**
     * List audit evidence url
     * Returns a paginated list of evidence urls for an audit.
     * @param auditId
     * @param auditEvidenceId
     * @param pageSize
     * @param pageCursor
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditEvidenceUrlsResponse listEvidenceUrls(
            String auditId,
            String auditEvidenceId,
            Optional<Integer> pageSize,
            Optional<String> pageCursor) throws Exception {
        ListAuditEvidenceUrlsRequest request =
            ListAuditEvidenceUrlsRequest
                .builder()
                .auditId(auditId)
                .auditEvidenceId(auditEvidenceId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                ListAuditEvidenceUrlsRequest.class,
                _baseUrl,
                "/audits/{auditId}/evidence/{auditEvidenceId}/urls",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                ListAuditEvidenceUrlsRequest.class,
                request, 
                null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "ListAuditEvidenceUrls", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "ListAuditEvidenceUrls",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "ListAuditEvidenceUrls",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "ListAuditEvidenceUrls",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListAuditEvidenceUrlsResponse.Builder _resBuilder = 
            ListAuditEvidenceUrlsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListAuditEvidenceUrlsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginatedResponseEvidenceUrl _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PaginatedResponseEvidenceUrl>() {});
                _res.withPaginatedResponseEvidenceUrl(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * List audit evidence
     * Returns a paginated list of evidence for an audit.
     * @return The call builder
     */
    public ListAuditEvidenceRequestBuilder listEvidence() {
        return new ListAuditEvidenceRequestBuilder(this);
    }

    /**
     * List audit evidence
     * Returns a paginated list of evidence for an audit.
     * @param auditId
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditEvidenceResponse listEvidence(
            String auditId) throws Exception {
        return listEvidence(auditId, Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * List audit evidence
     * Returns a paginated list of evidence for an audit.
     * @param auditId
     * @param pageSize
     * @param pageCursor
     * @param changedSinceDate Includes all audit evidence that have changed since changedSinceDate.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditEvidenceResponse listEvidence(
            String auditId,
            Optional<Integer> pageSize,
            Optional<String> pageCursor,
            Optional<OffsetDateTime> changedSinceDate) throws Exception {
        ListAuditEvidenceRequest request =
            ListAuditEvidenceRequest
                .builder()
                .auditId(auditId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .changedSinceDate(changedSinceDate)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                ListAuditEvidenceRequest.class,
                _baseUrl,
                "/audits/{auditId}/evidence",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                ListAuditEvidenceRequest.class,
                request, 
                null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "ListAuditEvidence", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "ListAuditEvidence",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "ListAuditEvidence",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "ListAuditEvidence",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListAuditEvidenceResponse.Builder _resBuilder = 
            ListAuditEvidenceResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListAuditEvidenceResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginatedResponseEvidence _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PaginatedResponseEvidence>() {});
                _res.withPaginatedResponseEvidence(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * List audit comments
     * Returns a paginated list of comments for an audit.
     * @return The call builder
     */
    public ListAuditCommentsRequestBuilder listComments() {
        return new ListAuditCommentsRequestBuilder(this);
    }

    /**
     * List audit comments
     * Returns a paginated list of comments for an audit.
     * @param auditId
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditCommentsResponse listComments(
            String auditId) throws Exception {
        return listComments(auditId, Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * List audit comments
     * Returns a paginated list of comments for an audit.
     * @param auditId
     * @param pageSize
     * @param pageCursor
     * @param changedSinceDate Includes all comments that have changed since changedSinceDate.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditCommentsResponse listComments(
            String auditId,
            Optional<Integer> pageSize,
            Optional<String> pageCursor,
            Optional<OffsetDateTime> changedSinceDate) throws Exception {
        ListAuditCommentsRequest request =
            ListAuditCommentsRequest
                .builder()
                .auditId(auditId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .changedSinceDate(changedSinceDate)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                ListAuditCommentsRequest.class,
                _baseUrl,
                "/audits/{auditId}/comments",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                ListAuditCommentsRequest.class,
                request, 
                null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "ListAuditComments", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "ListAuditComments",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "ListAuditComments",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "ListAuditComments",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListAuditCommentsResponse.Builder _resBuilder = 
            ListAuditCommentsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListAuditCommentsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginatedResponseComment _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PaginatedResponseComment>() {});
                _res.withPaginatedResponseComment(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * List audit controls
     * Returns a paginated list of controls for an audit.
     * @return The call builder
     */
    public ListAuditControlsRequestBuilder listControls() {
        return new ListAuditControlsRequestBuilder(this);
    }

    /**
     * List audit controls
     * Returns a paginated list of controls for an audit.
     * @param auditId
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditControlsResponse listControls(
            String auditId) throws Exception {
        return listControls(auditId, Optional.empty(), Optional.empty());
    }
    
    /**
     * List audit controls
     * Returns a paginated list of controls for an audit.
     * @param auditId
     * @param pageSize
     * @param pageCursor
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAuditControlsResponse listControls(
            String auditId,
            Optional<Integer> pageSize,
            Optional<String> pageCursor) throws Exception {
        ListAuditControlsRequest request =
            ListAuditControlsRequest
                .builder()
                .auditId(auditId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                ListAuditControlsRequest.class,
                _baseUrl,
                "/audits/{auditId}/controls",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                ListAuditControlsRequest.class,
                request, 
                null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "ListAuditControls", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "ListAuditControls",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "ListAuditControls",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "ListAuditControls",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListAuditControlsResponse.Builder _resBuilder = 
            ListAuditControlsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListAuditControlsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginatedResponseAuditorControl _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PaginatedResponseAuditorControl>() {});
                _res.withPaginatedResponseAuditorControl(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create a comment for audit evidence
     * Create a comment in Vanta for a piece of evidence.
     * @return The call builder
     */
    public CreateCommentForAuditEvidenceRequestBuilder createCommentForEvidence() {
        return new CreateCommentForAuditEvidenceRequestBuilder(this);
    }

    /**
     * Create a comment for audit evidence
     * Create a comment in Vanta for a piece of evidence.
     * @param auditId
     * @param auditEvidenceId
     * @param addCommentInput
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCommentForAuditEvidenceResponse createCommentForEvidence(
            String auditId,
            String auditEvidenceId,
            AddCommentInput addCommentInput) throws Exception {
        CreateCommentForAuditEvidenceRequest request =
            CreateCommentForAuditEvidenceRequest
                .builder()
                .auditId(auditId)
                .auditEvidenceId(auditEvidenceId)
                .addCommentInput(addCommentInput)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                CreateCommentForAuditEvidenceRequest.class,
                _baseUrl,
                "/audits/{auditId}/evidence/{auditEvidenceId}/comments",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "addCommentInput",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "CreateCommentForAuditEvidence", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "CreateCommentForAuditEvidence",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "CreateCommentForAuditEvidence",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "CreateCommentForAuditEvidence",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreateCommentForAuditEvidenceResponse.Builder _resBuilder = 
            CreateCommentForAuditEvidenceResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreateCommentForAuditEvidenceResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Comment _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Comment>() {});
                _res.withComment(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update audit evidence
     * Update audit evidence.
     * @return The call builder
     */
    public UpdateAuditEvidenceRequestBuilder updateEvidence() {
        return new UpdateAuditEvidenceRequestBuilder(this);
    }

    /**
     * Update audit evidence
     * Update audit evidence.
     * @param auditId
     * @param auditEvidenceId
     * @param auditEvidenceUpdateInput
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateAuditEvidenceResponse updateEvidence(
            String auditId,
            String auditEvidenceId,
            AuditEvidenceUpdateInput auditEvidenceUpdateInput) throws Exception {
        UpdateAuditEvidenceRequest request =
            UpdateAuditEvidenceRequest
                .builder()
                .auditId(auditId)
                .auditEvidenceId(auditEvidenceId)
                .auditEvidenceUpdateInput(auditEvidenceUpdateInput)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                UpdateAuditEvidenceRequest.class,
                _baseUrl,
                "/audits/{auditId}/evidence/{auditEvidenceId}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PATCH");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "auditEvidenceUpdateInput",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "UpdateAuditEvidence", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "UpdateAuditEvidence",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "UpdateAuditEvidence",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "UpdateAuditEvidence",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        UpdateAuditEvidenceResponse.Builder _resBuilder = 
            UpdateAuditEvidenceResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        UpdateAuditEvidenceResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Evidence _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Evidence>() {});
                _res.withEvidence(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create a custom evidence request for an audit
     * Create a custom evidence request for an audit.
     * @return The call builder
     */
    public CreateCustomEvidenceRequestRequestBuilder createCustomEvidenceRequest() {
        return new CreateCustomEvidenceRequestRequestBuilder(this);
    }

    /**
     * Create a custom evidence request for an audit
     * Create a custom evidence request for an audit.
     * @param auditId
     * @param createCustomEvidenceRequestInput
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCustomEvidenceRequestResponse createCustomEvidenceRequest(
            String auditId,
            CreateCustomEvidenceRequestInput createCustomEvidenceRequestInput) throws Exception {
        CreateCustomEvidenceRequestRequest request =
            CreateCustomEvidenceRequestRequest
                .builder()
                .auditId(auditId)
                .createCustomEvidenceRequestInput(createCustomEvidenceRequestInput)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                CreateCustomEvidenceRequestRequest.class,
                _baseUrl,
                "/audits/{auditId}/evidence/custom-evidence-requests",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "createCustomEvidenceRequestInput",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "CreateCustomEvidenceRequest", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "CreateCustomEvidenceRequest",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "CreateCustomEvidenceRequest",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "CreateCustomEvidenceRequest",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreateCustomEvidenceRequestResponse.Builder _resBuilder = 
            CreateCustomEvidenceRequestResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreateCustomEvidenceRequestResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                CustomEvidenceRequest _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CustomEvidenceRequest>() {});
                _res.withCustomEvidenceRequest(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create a custom control for an audit
     * Create a custom control for an audit.
     * @return The call builder
     */
    public CreateCustomControlRequestBuilder createCustomControl() {
        return new CreateCustomControlRequestBuilder(this);
    }

    /**
     * Create a custom control for an audit
     * Create a custom control for an audit.
     * @param auditId
     * @param createCustomControlInput
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCustomControlResponse createCustomControl(
            String auditId,
            CreateCustomControlInput createCustomControlInput) throws Exception {
        CreateCustomControlRequest request =
            CreateCustomControlRequest
                .builder()
                .auditId(auditId)
                .createCustomControlInput(createCustomControlInput)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                CreateCustomControlRequest.class,
                _baseUrl,
                "/audits/{auditId}/controls/custom-controls",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "createCustomControlInput",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "CreateCustomControl", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "CreateCustomControl",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "CreateCustomControl",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "CreateCustomControl",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreateCustomControlResponse.Builder _resBuilder = 
            CreateCustomControlResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreateCustomControlResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Control _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Control>() {});
                _res.withControl(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
