/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api;

import static com.vanta.vanta_auditor_api.operations.Operations.AsyncRequestOperation;

import com.vanta.vanta_auditor_api.models.components.AddCommentInput;
import com.vanta.vanta_auditor_api.models.components.AuditEvidenceUpdateInput;
import com.vanta.vanta_auditor_api.models.components.CreateCustomControlInput;
import com.vanta.vanta_auditor_api.models.components.CreateCustomEvidenceRequestInput;
import com.vanta.vanta_auditor_api.models.operations.CreateCommentForAuditEvidenceRequest;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomControlRequest;
import com.vanta.vanta_auditor_api.models.operations.CreateCustomEvidenceRequestRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditCommentsRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditControlsRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceUrlsRequest;
import com.vanta.vanta_auditor_api.models.operations.ListAuditsRequest;
import com.vanta.vanta_auditor_api.models.operations.UpdateAuditEvidenceRequest;
import com.vanta.vanta_auditor_api.models.operations.async.CreateCommentForAuditEvidenceRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.async.CreateCommentForAuditEvidenceResponse;
import com.vanta.vanta_auditor_api.models.operations.async.CreateCustomControlRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.async.CreateCustomControlResponse;
import com.vanta.vanta_auditor_api.models.operations.async.CreateCustomEvidenceRequestRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.async.CreateCustomEvidenceRequestResponse;
import com.vanta.vanta_auditor_api.models.operations.async.ListAuditCommentsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.async.ListAuditCommentsResponse;
import com.vanta.vanta_auditor_api.models.operations.async.ListAuditControlsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.async.ListAuditControlsResponse;
import com.vanta.vanta_auditor_api.models.operations.async.ListAuditEvidenceRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.async.ListAuditEvidenceResponse;
import com.vanta.vanta_auditor_api.models.operations.async.ListAuditEvidenceUrlsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.async.ListAuditEvidenceUrlsResponse;
import com.vanta.vanta_auditor_api.models.operations.async.ListAuditsRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.async.ListAuditsResponse;
import com.vanta.vanta_auditor_api.models.operations.async.UpdateAuditEvidenceRequestBuilder;
import com.vanta.vanta_auditor_api.models.operations.async.UpdateAuditEvidenceResponse;
import com.vanta.vanta_auditor_api.operations.CreateCommentForAuditEvidence;
import com.vanta.vanta_auditor_api.operations.CreateCustomControl;
import com.vanta.vanta_auditor_api.operations.CreateCustomEvidenceRequest;
import com.vanta.vanta_auditor_api.operations.ListAuditComments;
import com.vanta.vanta_auditor_api.operations.ListAuditControls;
import com.vanta.vanta_auditor_api.operations.ListAuditEvidence;
import com.vanta.vanta_auditor_api.operations.ListAuditEvidenceUrls;
import com.vanta.vanta_auditor_api.operations.ListAudits;
import com.vanta.vanta_auditor_api.operations.UpdateAuditEvidence;
import com.vanta.vanta_auditor_api.utils.Headers;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncAudits {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Audits syncSDK;

    AsyncAudits(Audits syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Audits sync() {
        return syncSDK;
    }


    /**
     * List audits
     * 
     * <p>Returns a paginated list of audits scoped to the audit firm.
     * 
     * @return The async call builder
     */
    public ListAuditsRequestBuilder list() {
        return new ListAuditsRequestBuilder(sdkConfiguration);
    }

    /**
     * List audits
     * 
     * <p>Returns a paginated list of audits scoped to the audit firm.
     * 
     * @return CompletableFuture&lt;ListAuditsResponse&gt; - The async response
     */
    public CompletableFuture<ListAuditsResponse> listDirect() {
        return list(
                Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * List audits
     * 
     * <p>Returns a paginated list of audits scoped to the audit firm.
     * 
     * @param pageSize 
     * @param pageCursor 
     * @param changedSinceDate Includes all audits that have changed since changedSinceDate.
     * @param isActiveAudit Includes only audits with no audit report uploaded
     * @return CompletableFuture&lt;ListAuditsResponse&gt; - The async response
     */
    public CompletableFuture<ListAuditsResponse> list(
            Optional<Integer> pageSize, Optional<String> pageCursor,
            Optional<OffsetDateTime> changedSinceDate, Optional<Boolean> isActiveAudit) {
        ListAuditsRequest request =
            ListAuditsRequest
                .builder()
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .changedSinceDate(changedSinceDate)
                .isActiveAudit(isActiveAudit)
                .build();
        AsyncRequestOperation<ListAuditsRequest, ListAuditsResponse> operation
              = new ListAudits.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List audit evidence url
     * 
     * <p>Returns a paginated list of evidence urls for an audit. This endpoint should be called whenever an
     * evidence is created or has a statusUpdatedAt field that is more recent than the most recent polling event.
     * 
     * @return The async call builder
     */
    public ListAuditEvidenceUrlsRequestBuilder getEvidenceUrls() {
        return new ListAuditEvidenceUrlsRequestBuilder(sdkConfiguration);
    }

    /**
     * List audit evidence url
     * 
     * <p>Returns a paginated list of evidence urls for an audit. This endpoint should be called whenever an
     * evidence is created or has a statusUpdatedAt field that is more recent than the most recent polling event.
     * 
     * @param auditId 
     * @param auditEvidenceId 
     * @return CompletableFuture&lt;ListAuditEvidenceUrlsResponse&gt; - The async response
     */
    public CompletableFuture<ListAuditEvidenceUrlsResponse> getEvidenceUrls(String auditId, String auditEvidenceId) {
        return getEvidenceUrls(
                auditId, auditEvidenceId, Optional.empty(),
                Optional.empty());
    }

    /**
     * List audit evidence url
     * 
     * <p>Returns a paginated list of evidence urls for an audit. This endpoint should be called whenever an
     * evidence is created or has a statusUpdatedAt field that is more recent than the most recent polling event.
     * 
     * @param auditId 
     * @param auditEvidenceId 
     * @param pageSize 
     * @param pageCursor 
     * @return CompletableFuture&lt;ListAuditEvidenceUrlsResponse&gt; - The async response
     */
    public CompletableFuture<ListAuditEvidenceUrlsResponse> getEvidenceUrls(
            String auditId, String auditEvidenceId,
            Optional<Integer> pageSize, Optional<String> pageCursor) {
        ListAuditEvidenceUrlsRequest request =
            ListAuditEvidenceUrlsRequest
                .builder()
                .auditId(auditId)
                .auditEvidenceId(auditEvidenceId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .build();
        AsyncRequestOperation<ListAuditEvidenceUrlsRequest, ListAuditEvidenceUrlsResponse> operation
              = new ListAuditEvidenceUrls.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List audit evidence
     * 
     * <p>Returns a paginated list of evidence for an audit.
     * 
     * @return The async call builder
     */
    public ListAuditEvidenceRequestBuilder listEvidence() {
        return new ListAuditEvidenceRequestBuilder(sdkConfiguration);
    }

    /**
     * List audit evidence
     * 
     * <p>Returns a paginated list of evidence for an audit.
     * 
     * @param auditId 
     * @return CompletableFuture&lt;ListAuditEvidenceResponse&gt; - The async response
     */
    public CompletableFuture<ListAuditEvidenceResponse> listEvidence(String auditId) {
        return listEvidence(
                auditId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * List audit evidence
     * 
     * <p>Returns a paginated list of evidence for an audit.
     * 
     * @param auditId 
     * @param pageSize 
     * @param pageCursor 
     * @param changedSinceDate Includes all audit evidence that have changed since changedSinceDate.
     * @return CompletableFuture&lt;ListAuditEvidenceResponse&gt; - The async response
     */
    public CompletableFuture<ListAuditEvidenceResponse> listEvidence(
            String auditId, Optional<Integer> pageSize,
            Optional<String> pageCursor, Optional<OffsetDateTime> changedSinceDate) {
        ListAuditEvidenceRequest request =
            ListAuditEvidenceRequest
                .builder()
                .auditId(auditId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .changedSinceDate(changedSinceDate)
                .build();
        AsyncRequestOperation<ListAuditEvidenceRequest, ListAuditEvidenceResponse> operation
              = new ListAuditEvidence.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List audit comments
     * 
     * <p>Returns a paginated list of comments for an audit.
     * 
     * @return The async call builder
     */
    public ListAuditCommentsRequestBuilder listComments() {
        return new ListAuditCommentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List audit comments
     * 
     * <p>Returns a paginated list of comments for an audit.
     * 
     * @param auditId 
     * @return CompletableFuture&lt;ListAuditCommentsResponse&gt; - The async response
     */
    public CompletableFuture<ListAuditCommentsResponse> listComments(String auditId) {
        return listComments(
                auditId, Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * List audit comments
     * 
     * <p>Returns a paginated list of comments for an audit.
     * 
     * @param auditId 
     * @param pageSize 
     * @param pageCursor 
     * @param changedSinceDate Includes all comments that have changed since changedSinceDate.
     * @return CompletableFuture&lt;ListAuditCommentsResponse&gt; - The async response
     */
    public CompletableFuture<ListAuditCommentsResponse> listComments(
            String auditId, Optional<Integer> pageSize,
            Optional<String> pageCursor, Optional<OffsetDateTime> changedSinceDate) {
        ListAuditCommentsRequest request =
            ListAuditCommentsRequest
                .builder()
                .auditId(auditId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .changedSinceDate(changedSinceDate)
                .build();
        AsyncRequestOperation<ListAuditCommentsRequest, ListAuditCommentsResponse> operation
              = new ListAuditComments.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List audit controls
     * 
     * <p>Returns a paginated list of controls for an audit.
     * 
     * @return The async call builder
     */
    public ListAuditControlsRequestBuilder listControls() {
        return new ListAuditControlsRequestBuilder(sdkConfiguration);
    }

    /**
     * List audit controls
     * 
     * <p>Returns a paginated list of controls for an audit.
     * 
     * @param auditId 
     * @return CompletableFuture&lt;ListAuditControlsResponse&gt; - The async response
     */
    public CompletableFuture<ListAuditControlsResponse> listControls(String auditId) {
        return listControls(auditId, Optional.empty(), Optional.empty());
    }

    /**
     * List audit controls
     * 
     * <p>Returns a paginated list of controls for an audit.
     * 
     * @param auditId 
     * @param pageSize 
     * @param pageCursor 
     * @return CompletableFuture&lt;ListAuditControlsResponse&gt; - The async response
     */
    public CompletableFuture<ListAuditControlsResponse> listControls(
            String auditId, Optional<Integer> pageSize,
            Optional<String> pageCursor) {
        ListAuditControlsRequest request =
            ListAuditControlsRequest
                .builder()
                .auditId(auditId)
                .pageSize(pageSize)
                .pageCursor(pageCursor)
                .build();
        AsyncRequestOperation<ListAuditControlsRequest, ListAuditControlsResponse> operation
              = new ListAuditControls.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a comment for audit evidence
     * 
     * <p>Create a comment in Vanta for a piece of evidence.
     * 
     * @return The async call builder
     */
    public CreateCommentForAuditEvidenceRequestBuilder createCommentForEvidence() {
        return new CreateCommentForAuditEvidenceRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a comment for audit evidence
     * 
     * <p>Create a comment in Vanta for a piece of evidence.
     * 
     * @param auditId 
     * @param auditEvidenceId 
     * @param addCommentInput 
     * @return CompletableFuture&lt;CreateCommentForAuditEvidenceResponse&gt; - The async response
     */
    public CompletableFuture<CreateCommentForAuditEvidenceResponse> createCommentForEvidence(
            String auditId, String auditEvidenceId,
            AddCommentInput addCommentInput) {
        CreateCommentForAuditEvidenceRequest request =
            CreateCommentForAuditEvidenceRequest
                .builder()
                .auditId(auditId)
                .auditEvidenceId(auditEvidenceId)
                .addCommentInput(addCommentInput)
                .build();
        AsyncRequestOperation<CreateCommentForAuditEvidenceRequest, CreateCommentForAuditEvidenceResponse> operation
              = new CreateCommentForAuditEvidence.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update audit evidence
     * 
     * <p>Update audit evidence.
     * 
     * @return The async call builder
     */
    public UpdateAuditEvidenceRequestBuilder updateEvidence() {
        return new UpdateAuditEvidenceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update audit evidence
     * 
     * <p>Update audit evidence.
     * 
     * @param auditId 
     * @param auditEvidenceId 
     * @param auditEvidenceUpdateInput 
     * @return CompletableFuture&lt;UpdateAuditEvidenceResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAuditEvidenceResponse> updateEvidence(
            String auditId, String auditEvidenceId,
            AuditEvidenceUpdateInput auditEvidenceUpdateInput) {
        UpdateAuditEvidenceRequest request =
            UpdateAuditEvidenceRequest
                .builder()
                .auditId(auditId)
                .auditEvidenceId(auditEvidenceId)
                .auditEvidenceUpdateInput(auditEvidenceUpdateInput)
                .build();
        AsyncRequestOperation<UpdateAuditEvidenceRequest, UpdateAuditEvidenceResponse> operation
              = new UpdateAuditEvidence.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a custom evidence request for an audit
     * 
     * <p>Create a custom evidence request for an audit.
     * 
     * @return The async call builder
     */
    public CreateCustomEvidenceRequestRequestBuilder createCustomEvidenceRequest() {
        return new CreateCustomEvidenceRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a custom evidence request for an audit
     * 
     * <p>Create a custom evidence request for an audit.
     * 
     * @param auditId 
     * @param createCustomEvidenceRequestInput 
     * @return CompletableFuture&lt;CreateCustomEvidenceRequestResponse&gt; - The async response
     */
    public CompletableFuture<CreateCustomEvidenceRequestResponse> createCustomEvidenceRequest(String auditId, CreateCustomEvidenceRequestInput createCustomEvidenceRequestInput) {
        CreateCustomEvidenceRequestRequest request =
            CreateCustomEvidenceRequestRequest
                .builder()
                .auditId(auditId)
                .createCustomEvidenceRequestInput(createCustomEvidenceRequestInput)
                .build();
        AsyncRequestOperation<CreateCustomEvidenceRequestRequest, CreateCustomEvidenceRequestResponse> operation
              = new CreateCustomEvidenceRequest.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a custom control for an audit
     * 
     * <p>Create a custom control for an audit.
     * 
     * @return The async call builder
     */
    public CreateCustomControlRequestBuilder createCustomControl() {
        return new CreateCustomControlRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a custom control for an audit
     * 
     * <p>Create a custom control for an audit.
     * 
     * @param auditId 
     * @param createCustomControlInput 
     * @return CompletableFuture&lt;CreateCustomControlResponse&gt; - The async response
     */
    public CompletableFuture<CreateCustomControlResponse> createCustomControl(String auditId, CreateCustomControlInput createCustomControlInput) {
        CreateCustomControlRequest request =
            CreateCustomControlRequest
                .builder()
                .auditId(auditId)
                .createCustomControlInput(createCustomControlInput)
                .build();
        AsyncRequestOperation<CreateCustomControlRequest, CreateCustomControlResponse> operation
              = new CreateCustomControl.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
