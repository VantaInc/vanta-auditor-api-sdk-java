/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vanta.vanta_auditor_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.vanta.vanta_auditor_api.models.components.CreateCustomControlInput;
import com.vanta.vanta_auditor_api.utils.SpeakeasyMetadata;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class CreateCustomControlRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=auditId")
    private String auditId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private CreateCustomControlInput createCustomControlInput;

    @JsonCreator
    public CreateCustomControlRequest(
            String auditId,
            CreateCustomControlInput createCustomControlInput) {
        Utils.checkNotNull(auditId, "auditId");
        Utils.checkNotNull(createCustomControlInput, "createCustomControlInput");
        this.auditId = auditId;
        this.createCustomControlInput = createCustomControlInput;
    }

    @JsonIgnore
    public String auditId() {
        return auditId;
    }

    @JsonIgnore
    public CreateCustomControlInput createCustomControlInput() {
        return createCustomControlInput;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateCustomControlRequest withAuditId(String auditId) {
        Utils.checkNotNull(auditId, "auditId");
        this.auditId = auditId;
        return this;
    }

    public CreateCustomControlRequest withCreateCustomControlInput(CreateCustomControlInput createCustomControlInput) {
        Utils.checkNotNull(createCustomControlInput, "createCustomControlInput");
        this.createCustomControlInput = createCustomControlInput;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCustomControlRequest other = (CreateCustomControlRequest) o;
        return 
            Objects.deepEquals(this.auditId, other.auditId) &&
            Objects.deepEquals(this.createCustomControlInput, other.createCustomControlInput);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            auditId,
            createCustomControlInput);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCustomControlRequest.class,
                "auditId", auditId,
                "createCustomControlInput", createCustomControlInput);
    }
    
    public final static class Builder {
 
        private String auditId;
 
        private CreateCustomControlInput createCustomControlInput;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder auditId(String auditId) {
            Utils.checkNotNull(auditId, "auditId");
            this.auditId = auditId;
            return this;
        }

        public Builder createCustomControlInput(CreateCustomControlInput createCustomControlInput) {
            Utils.checkNotNull(createCustomControlInput, "createCustomControlInput");
            this.createCustomControlInput = createCustomControlInput;
            return this;
        }
        
        public CreateCustomControlRequest build() {
            return new CreateCustomControlRequest(
                auditId,
                createCustomControlInput);
        }
    }
}

