/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.vanta.vanta_auditor_api.utils.LazySingletonValue;
import com.vanta.vanta_auditor_api.utils.SpeakeasyMetadata;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;


public class ListAuditsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    private Optional<Integer> pageSize;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageCursor")
    private Optional<String> pageCursor;

    /**
     * Includes all audits that have changed since changedSinceDate.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=changedSinceDate")
    private Optional<OffsetDateTime> changedSinceDate;

    /**
     * Includes only audits with no audit report uploaded
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=isActiveAudit")
    private Optional<Boolean> isActiveAudit;

    @JsonCreator
    public ListAuditsRequest(
            Optional<Integer> pageSize,
            Optional<String> pageCursor,
            Optional<OffsetDateTime> changedSinceDate,
            Optional<Boolean> isActiveAudit) {
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(pageCursor, "pageCursor");
        Utils.checkNotNull(changedSinceDate, "changedSinceDate");
        Utils.checkNotNull(isActiveAudit, "isActiveAudit");
        this.pageSize = pageSize;
        this.pageCursor = pageCursor;
        this.changedSinceDate = changedSinceDate;
        this.isActiveAudit = isActiveAudit;
    }
    
    public ListAuditsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public Optional<Integer> pageSize() {
        return pageSize;
    }

    @JsonIgnore
    public Optional<String> pageCursor() {
        return pageCursor;
    }

    /**
     * Includes all audits that have changed since changedSinceDate.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> changedSinceDate() {
        return changedSinceDate;
    }

    /**
     * Includes only audits with no audit report uploaded
     */
    @JsonIgnore
    public Optional<Boolean> isActiveAudit() {
        return isActiveAudit;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ListAuditsRequest withPageSize(int pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }


    public ListAuditsRequest withPageSize(Optional<Integer> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    public ListAuditsRequest withPageCursor(String pageCursor) {
        Utils.checkNotNull(pageCursor, "pageCursor");
        this.pageCursor = Optional.ofNullable(pageCursor);
        return this;
    }


    public ListAuditsRequest withPageCursor(Optional<String> pageCursor) {
        Utils.checkNotNull(pageCursor, "pageCursor");
        this.pageCursor = pageCursor;
        return this;
    }

    /**
     * Includes all audits that have changed since changedSinceDate.
     */
    public ListAuditsRequest withChangedSinceDate(OffsetDateTime changedSinceDate) {
        Utils.checkNotNull(changedSinceDate, "changedSinceDate");
        this.changedSinceDate = Optional.ofNullable(changedSinceDate);
        return this;
    }


    /**
     * Includes all audits that have changed since changedSinceDate.
     */
    public ListAuditsRequest withChangedSinceDate(Optional<OffsetDateTime> changedSinceDate) {
        Utils.checkNotNull(changedSinceDate, "changedSinceDate");
        this.changedSinceDate = changedSinceDate;
        return this;
    }

    /**
     * Includes only audits with no audit report uploaded
     */
    public ListAuditsRequest withIsActiveAudit(boolean isActiveAudit) {
        Utils.checkNotNull(isActiveAudit, "isActiveAudit");
        this.isActiveAudit = Optional.ofNullable(isActiveAudit);
        return this;
    }


    /**
     * Includes only audits with no audit report uploaded
     */
    public ListAuditsRequest withIsActiveAudit(Optional<Boolean> isActiveAudit) {
        Utils.checkNotNull(isActiveAudit, "isActiveAudit");
        this.isActiveAudit = isActiveAudit;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAuditsRequest other = (ListAuditsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.pageSize, other.pageSize) &&
            Utils.enhancedDeepEquals(this.pageCursor, other.pageCursor) &&
            Utils.enhancedDeepEquals(this.changedSinceDate, other.changedSinceDate) &&
            Utils.enhancedDeepEquals(this.isActiveAudit, other.isActiveAudit);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            pageSize, pageCursor, changedSinceDate,
            isActiveAudit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAuditsRequest.class,
                "pageSize", pageSize,
                "pageCursor", pageCursor,
                "changedSinceDate", changedSinceDate,
                "isActiveAudit", isActiveAudit);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Integer> pageSize;

        private Optional<String> pageCursor = Optional.empty();

        private Optional<OffsetDateTime> changedSinceDate = Optional.empty();

        private Optional<Boolean> isActiveAudit = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder pageSize(int pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        public Builder pageSize(Optional<Integer> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }


        public Builder pageCursor(String pageCursor) {
            Utils.checkNotNull(pageCursor, "pageCursor");
            this.pageCursor = Optional.ofNullable(pageCursor);
            return this;
        }

        public Builder pageCursor(Optional<String> pageCursor) {
            Utils.checkNotNull(pageCursor, "pageCursor");
            this.pageCursor = pageCursor;
            return this;
        }


        /**
         * Includes all audits that have changed since changedSinceDate.
         */
        public Builder changedSinceDate(OffsetDateTime changedSinceDate) {
            Utils.checkNotNull(changedSinceDate, "changedSinceDate");
            this.changedSinceDate = Optional.ofNullable(changedSinceDate);
            return this;
        }

        /**
         * Includes all audits that have changed since changedSinceDate.
         */
        public Builder changedSinceDate(Optional<OffsetDateTime> changedSinceDate) {
            Utils.checkNotNull(changedSinceDate, "changedSinceDate");
            this.changedSinceDate = changedSinceDate;
            return this;
        }


        /**
         * Includes only audits with no audit report uploaded
         */
        public Builder isActiveAudit(boolean isActiveAudit) {
            Utils.checkNotNull(isActiveAudit, "isActiveAudit");
            this.isActiveAudit = Optional.ofNullable(isActiveAudit);
            return this;
        }

        /**
         * Includes only audits with no audit report uploaded
         */
        public Builder isActiveAudit(Optional<Boolean> isActiveAudit) {
            Utils.checkNotNull(isActiveAudit, "isActiveAudit");
            this.isActiveAudit = isActiveAudit;
            return this;
        }

        public ListAuditsRequest build() {
            if (pageSize == null) {
                pageSize = _SINGLETON_VALUE_PageSize.value();
            }

            return new ListAuditsRequest(
                pageSize, pageCursor, changedSinceDate,
                isActiveAudit);
        }


        private static final LazySingletonValue<Optional<Integer>> _SINGLETON_VALUE_PageSize =
                new LazySingletonValue<>(
                        "pageSize",
                        "10",
                        new TypeReference<Optional<Integer>>() {});
    }
}
