/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.operations.async;

import static com.vanta.vanta_auditor_api.operations.Operations.AsyncRequestOperation;

import com.vanta.vanta_auditor_api.SDKConfiguration;
import com.vanta.vanta_auditor_api.models.components.AuditEvidenceUpdateInput;
import com.vanta.vanta_auditor_api.models.operations.UpdateAuditEvidenceRequest;
import com.vanta.vanta_auditor_api.operations.UpdateAuditEvidence;
import com.vanta.vanta_auditor_api.utils.Headers;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;

public class UpdateAuditEvidenceRequestBuilder {

    private String auditId;
    private String auditEvidenceId;
    private AuditEvidenceUpdateInput auditEvidenceUpdateInput;
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public UpdateAuditEvidenceRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public UpdateAuditEvidenceRequestBuilder auditId(String auditId) {
        Utils.checkNotNull(auditId, "auditId");
        this.auditId = auditId;
        return this;
    }

    public UpdateAuditEvidenceRequestBuilder auditEvidenceId(String auditEvidenceId) {
        Utils.checkNotNull(auditEvidenceId, "auditEvidenceId");
        this.auditEvidenceId = auditEvidenceId;
        return this;
    }

    public UpdateAuditEvidenceRequestBuilder auditEvidenceUpdateInput(AuditEvidenceUpdateInput auditEvidenceUpdateInput) {
        Utils.checkNotNull(auditEvidenceUpdateInput, "auditEvidenceUpdateInput");
        this.auditEvidenceUpdateInput = auditEvidenceUpdateInput;
        return this;
    }


    private UpdateAuditEvidenceRequest buildRequest() {

        UpdateAuditEvidenceRequest request = new UpdateAuditEvidenceRequest(auditId,
            auditEvidenceId,
            auditEvidenceUpdateInput);

        return request;
    }

    public CompletableFuture<UpdateAuditEvidenceResponse> call() throws Exception {
        
        AsyncRequestOperation<UpdateAuditEvidenceRequest, UpdateAuditEvidenceResponse> operation
              = new UpdateAuditEvidence.Async(sdkConfiguration, _headers);
        UpdateAuditEvidenceRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
