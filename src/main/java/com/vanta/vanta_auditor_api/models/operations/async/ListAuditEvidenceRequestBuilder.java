/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.operations.async;

import static com.vanta.vanta_auditor_api.operations.Operations.AsyncRequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import com.vanta.vanta_auditor_api.SDKConfiguration;
import com.vanta.vanta_auditor_api.models.operations.ListAuditEvidenceRequest;
import com.vanta.vanta_auditor_api.operations.ListAuditEvidence;
import com.vanta.vanta_auditor_api.utils.Headers;
import com.vanta.vanta_auditor_api.utils.LazySingletonValue;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class ListAuditEvidenceRequestBuilder {

    private String auditId;
    private Optional<Integer> pageSize = Utils.readDefaultOrConstValue(
                            "pageSize",
                            "10",
                            new TypeReference<Optional<Integer>>() {});
    private Optional<String> pageCursor = Optional.empty();
    private Optional<OffsetDateTime> changedSinceDate = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public ListAuditEvidenceRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public ListAuditEvidenceRequestBuilder auditId(String auditId) {
        Utils.checkNotNull(auditId, "auditId");
        this.auditId = auditId;
        return this;
    }
                
    public ListAuditEvidenceRequestBuilder pageSize(int pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.of(pageSize);
        return this;
    }

    public ListAuditEvidenceRequestBuilder pageSize(Optional<Integer> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }
                
    public ListAuditEvidenceRequestBuilder pageCursor(String pageCursor) {
        Utils.checkNotNull(pageCursor, "pageCursor");
        this.pageCursor = Optional.of(pageCursor);
        return this;
    }

    public ListAuditEvidenceRequestBuilder pageCursor(Optional<String> pageCursor) {
        Utils.checkNotNull(pageCursor, "pageCursor");
        this.pageCursor = pageCursor;
        return this;
    }
                
    public ListAuditEvidenceRequestBuilder changedSinceDate(OffsetDateTime changedSinceDate) {
        Utils.checkNotNull(changedSinceDate, "changedSinceDate");
        this.changedSinceDate = Optional.of(changedSinceDate);
        return this;
    }

    public ListAuditEvidenceRequestBuilder changedSinceDate(Optional<OffsetDateTime> changedSinceDate) {
        Utils.checkNotNull(changedSinceDate, "changedSinceDate");
        this.changedSinceDate = changedSinceDate;
        return this;
    }


    private ListAuditEvidenceRequest buildRequest() {
        if (pageSize == null) {
            pageSize = _SINGLETON_VALUE_PageSize.value();
        }

        ListAuditEvidenceRequest request = new ListAuditEvidenceRequest(auditId,
            pageSize,
            pageCursor,
            changedSinceDate);

        return request;
    }

    public CompletableFuture<ListAuditEvidenceResponse> call() throws Exception {
        
        AsyncRequestOperation<ListAuditEvidenceRequest, ListAuditEvidenceResponse> operation
              = new ListAuditEvidence.Async(sdkConfiguration, _headers);
        ListAuditEvidenceRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

    private static final LazySingletonValue<Optional<Integer>> _SINGLETON_VALUE_PageSize =
            new LazySingletonValue<>(
                    "pageSize",
                    "10",
                    new TypeReference<Optional<Integer>>() {});
}
