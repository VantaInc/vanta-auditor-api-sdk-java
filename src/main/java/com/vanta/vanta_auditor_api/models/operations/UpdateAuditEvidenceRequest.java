/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.vanta.vanta_auditor_api.models.components.AuditEvidenceUpdateInput;
import com.vanta.vanta_auditor_api.utils.SpeakeasyMetadata;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class UpdateAuditEvidenceRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=auditId")
    private String auditId;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=auditEvidenceId")
    private String auditEvidenceId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private AuditEvidenceUpdateInput auditEvidenceUpdateInput;

    @JsonCreator
    public UpdateAuditEvidenceRequest(
            String auditId,
            String auditEvidenceId,
            AuditEvidenceUpdateInput auditEvidenceUpdateInput) {
        Utils.checkNotNull(auditId, "auditId");
        Utils.checkNotNull(auditEvidenceId, "auditEvidenceId");
        Utils.checkNotNull(auditEvidenceUpdateInput, "auditEvidenceUpdateInput");
        this.auditId = auditId;
        this.auditEvidenceId = auditEvidenceId;
        this.auditEvidenceUpdateInput = auditEvidenceUpdateInput;
    }

    @JsonIgnore
    public String auditId() {
        return auditId;
    }

    @JsonIgnore
    public String auditEvidenceId() {
        return auditEvidenceId;
    }

    @JsonIgnore
    public AuditEvidenceUpdateInput auditEvidenceUpdateInput() {
        return auditEvidenceUpdateInput;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UpdateAuditEvidenceRequest withAuditId(String auditId) {
        Utils.checkNotNull(auditId, "auditId");
        this.auditId = auditId;
        return this;
    }

    public UpdateAuditEvidenceRequest withAuditEvidenceId(String auditEvidenceId) {
        Utils.checkNotNull(auditEvidenceId, "auditEvidenceId");
        this.auditEvidenceId = auditEvidenceId;
        return this;
    }

    public UpdateAuditEvidenceRequest withAuditEvidenceUpdateInput(AuditEvidenceUpdateInput auditEvidenceUpdateInput) {
        Utils.checkNotNull(auditEvidenceUpdateInput, "auditEvidenceUpdateInput");
        this.auditEvidenceUpdateInput = auditEvidenceUpdateInput;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateAuditEvidenceRequest other = (UpdateAuditEvidenceRequest) o;
        return 
            Objects.deepEquals(this.auditId, other.auditId) &&
            Objects.deepEquals(this.auditEvidenceId, other.auditEvidenceId) &&
            Objects.deepEquals(this.auditEvidenceUpdateInput, other.auditEvidenceUpdateInput);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            auditId,
            auditEvidenceId,
            auditEvidenceUpdateInput);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateAuditEvidenceRequest.class,
                "auditId", auditId,
                "auditEvidenceId", auditEvidenceId,
                "auditEvidenceUpdateInput", auditEvidenceUpdateInput);
    }
    
    public final static class Builder {
 
        private String auditId;
 
        private String auditEvidenceId;
 
        private AuditEvidenceUpdateInput auditEvidenceUpdateInput;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder auditId(String auditId) {
            Utils.checkNotNull(auditId, "auditId");
            this.auditId = auditId;
            return this;
        }

        public Builder auditEvidenceId(String auditEvidenceId) {
            Utils.checkNotNull(auditEvidenceId, "auditEvidenceId");
            this.auditEvidenceId = auditEvidenceId;
            return this;
        }

        public Builder auditEvidenceUpdateInput(AuditEvidenceUpdateInput auditEvidenceUpdateInput) {
            Utils.checkNotNull(auditEvidenceUpdateInput, "auditEvidenceUpdateInput");
            this.auditEvidenceUpdateInput = auditEvidenceUpdateInput;
            return this;
        }
        
        public UpdateAuditEvidenceRequest build() {
            return new UpdateAuditEvidenceRequest(
                auditId,
                auditEvidenceId,
                auditEvidenceUpdateInput);
        }
    }
}
