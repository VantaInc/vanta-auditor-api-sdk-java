/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.operations;

import static com.vanta.vanta_auditor_api.operations.Operations.RequestOperation;

import com.vanta.vanta_auditor_api.SDKConfiguration;
import com.vanta.vanta_auditor_api.models.components.CreateCustomEvidenceRequestInput;
import com.vanta.vanta_auditor_api.operations.CreateCustomEvidenceRequestOperation;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Exception;
import java.lang.String;

public class CreateCustomEvidenceRequestRequestBuilder {

    private String auditId;
    private CreateCustomEvidenceRequestInput createCustomEvidenceRequestInput;
    private final SDKConfiguration sdkConfiguration;

    public CreateCustomEvidenceRequestRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateCustomEvidenceRequestRequestBuilder auditId(String auditId) {
        Utils.checkNotNull(auditId, "auditId");
        this.auditId = auditId;
        return this;
    }

    public CreateCustomEvidenceRequestRequestBuilder createCustomEvidenceRequestInput(CreateCustomEvidenceRequestInput createCustomEvidenceRequestInput) {
        Utils.checkNotNull(createCustomEvidenceRequestInput, "createCustomEvidenceRequestInput");
        this.createCustomEvidenceRequestInput = createCustomEvidenceRequestInput;
        return this;
    }


    private CreateCustomEvidenceRequestRequest buildRequest() {

        CreateCustomEvidenceRequestRequest request = new CreateCustomEvidenceRequestRequest(auditId,
            createCustomEvidenceRequestInput);

        return request;
    }

    public CreateCustomEvidenceRequestResponse call() throws Exception {
        
        RequestOperation<CreateCustomEvidenceRequestRequest, CreateCustomEvidenceRequestResponse> operation
              = new CreateCustomEvidenceRequestOperation(sdkConfiguration);
        CreateCustomEvidenceRequestRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
