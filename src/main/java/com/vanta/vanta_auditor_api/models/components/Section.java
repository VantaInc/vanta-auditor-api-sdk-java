/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class Section {
    /**
     * The section name
     */
    @JsonProperty("name")
    private String name;

    /**
     * The section framework
     */
    @JsonProperty("framework")
    private String framework;

    @JsonCreator
    public Section(
            @JsonProperty("name") String name,
            @JsonProperty("framework") String framework) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(framework, "framework");
        this.name = name;
        this.framework = framework;
    }

    /**
     * The section name
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The section framework
     */
    @JsonIgnore
    public String framework() {
        return framework;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The section name
     */
    public Section withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The section framework
     */
    public Section withFramework(String framework) {
        Utils.checkNotNull(framework, "framework");
        this.framework = framework;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Section other = (Section) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.framework, other.framework);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, framework);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Section.class,
                "name", name,
                "framework", framework);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private String framework;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The section name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The section framework
         */
        public Builder framework(String framework) {
            Utils.checkNotNull(framework, "framework");
            this.framework = framework;
            return this;
        }

        public Section build() {

            return new Section(
                name, framework);
        }

    }
}
