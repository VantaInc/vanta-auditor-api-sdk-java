/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class EvidenceUrl {

    /**
     * Vanta internal reference to evidence
     */
    @JsonProperty("id")
    private String id;

    /**
     * Pre-signed S3 URL for evidence
     */
    @JsonProperty("url")
    private String url;

    /**
     * File name of evidence
     */
    @JsonProperty("filename")
    private String filename;

    /**
     * Set to true if this is a presigned s3 url. Set to false if this is a customer uploaded link
     */
    @JsonProperty("isDownloadable")
    private boolean isDownloadable;

    @JsonCreator
    public EvidenceUrl(
            @JsonProperty("id") String id,
            @JsonProperty("url") String url,
            @JsonProperty("filename") String filename,
            @JsonProperty("isDownloadable") boolean isDownloadable) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(filename, "filename");
        Utils.checkNotNull(isDownloadable, "isDownloadable");
        this.id = id;
        this.url = url;
        this.filename = filename;
        this.isDownloadable = isDownloadable;
    }

    /**
     * Vanta internal reference to evidence
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Pre-signed S3 URL for evidence
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * File name of evidence
     */
    @JsonIgnore
    public String filename() {
        return filename;
    }

    /**
     * Set to true if this is a presigned s3 url. Set to false if this is a customer uploaded link
     */
    @JsonIgnore
    public boolean isDownloadable() {
        return isDownloadable;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Vanta internal reference to evidence
     */
    public EvidenceUrl withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Pre-signed S3 URL for evidence
     */
    public EvidenceUrl withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * File name of evidence
     */
    public EvidenceUrl withFilename(String filename) {
        Utils.checkNotNull(filename, "filename");
        this.filename = filename;
        return this;
    }

    /**
     * Set to true if this is a presigned s3 url. Set to false if this is a customer uploaded link
     */
    public EvidenceUrl withIsDownloadable(boolean isDownloadable) {
        Utils.checkNotNull(isDownloadable, "isDownloadable");
        this.isDownloadable = isDownloadable;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EvidenceUrl other = (EvidenceUrl) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.filename, other.filename) &&
            Objects.deepEquals(this.isDownloadable, other.isDownloadable);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            url,
            filename,
            isDownloadable);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EvidenceUrl.class,
                "id", id,
                "url", url,
                "filename", filename,
                "isDownloadable", isDownloadable);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String url;
 
        private String filename;
 
        private Boolean isDownloadable;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Vanta internal reference to evidence
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Pre-signed S3 URL for evidence
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * File name of evidence
         */
        public Builder filename(String filename) {
            Utils.checkNotNull(filename, "filename");
            this.filename = filename;
            return this;
        }

        /**
         * Set to true if this is a presigned s3 url. Set to false if this is a customer uploaded link
         */
        public Builder isDownloadable(boolean isDownloadable) {
            Utils.checkNotNull(isDownloadable, "isDownloadable");
            this.isDownloadable = isDownloadable;
            return this;
        }
        
        public EvidenceUrl build() {
            return new EvidenceUrl(
                id,
                url,
                filename,
                isDownloadable);
        }
    }
}
