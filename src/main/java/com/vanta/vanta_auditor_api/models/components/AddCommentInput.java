/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;


public class AddCommentInput {
    /**
     * Text value of the comment
     */
    @JsonProperty("text")
    private String text;

    /**
     * Email of author. Must match an existing Vanta user and the user must exist under the Audit Firm who is making the API request
     */
    @JsonProperty("email")
    private String email;

    /**
     * When the comment was created in the external system
     */
    @JsonProperty("creationDate")
    private OffsetDateTime creationDate;

    @JsonCreator
    public AddCommentInput(
            @JsonProperty("text") String text,
            @JsonProperty("email") String email,
            @JsonProperty("creationDate") OffsetDateTime creationDate) {
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(creationDate, "creationDate");
        this.text = text;
        this.email = email;
        this.creationDate = creationDate;
    }

    /**
     * Text value of the comment
     */
    @JsonIgnore
    public String text() {
        return text;
    }

    /**
     * Email of author. Must match an existing Vanta user and the user must exist under the Audit Firm who is making the API request
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * When the comment was created in the external system
     */
    @JsonIgnore
    public OffsetDateTime creationDate() {
        return creationDate;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Text value of the comment
     */
    public AddCommentInput withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    /**
     * Email of author. Must match an existing Vanta user and the user must exist under the Audit Firm who is making the API request
     */
    public AddCommentInput withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * When the comment was created in the external system
     */
    public AddCommentInput withCreationDate(OffsetDateTime creationDate) {
        Utils.checkNotNull(creationDate, "creationDate");
        this.creationDate = creationDate;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddCommentInput other = (AddCommentInput) o;
        return 
            Utils.enhancedDeepEquals(this.text, other.text) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.creationDate, other.creationDate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            text, email, creationDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddCommentInput.class,
                "text", text,
                "email", email,
                "creationDate", creationDate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String text;

        private String email;

        private OffsetDateTime creationDate;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Text value of the comment
         */
        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }


        /**
         * Email of author. Must match an existing Vanta user and the user must exist under the Audit Firm who is making the API request
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        /**
         * When the comment was created in the external system
         */
        public Builder creationDate(OffsetDateTime creationDate) {
            Utils.checkNotNull(creationDate, "creationDate");
            this.creationDate = creationDate;
            return this;
        }

        public AddCommentInput build() {

            return new AddCommentInput(
                text, email, creationDate);
        }

    }
}
