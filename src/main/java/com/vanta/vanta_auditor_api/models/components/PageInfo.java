/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * PageInfo
 * 
 * <p>Provides information about the pagination of a dataset.
 */
public class PageInfo {

    /**
     * The cursor that points to the end of the current page, or null if there is no such cursor.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("endCursor")
    private Optional<String> endCursor;

    /**
     * Indicates if there is another page after the current page.
     */
    @JsonProperty("hasNextPage")
    private boolean hasNextPage;

    /**
     * Indicates if there is a page before the current page.
     */
    @JsonProperty("hasPreviousPage")
    private boolean hasPreviousPage;

    /**
     * The cursor that points to the start of the current page, or null if there is no such cursor.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("startCursor")
    private Optional<String> startCursor;

    @JsonCreator
    public PageInfo(
            @JsonProperty("endCursor") Optional<String> endCursor,
            @JsonProperty("hasNextPage") boolean hasNextPage,
            @JsonProperty("hasPreviousPage") boolean hasPreviousPage,
            @JsonProperty("startCursor") Optional<String> startCursor) {
        Utils.checkNotNull(endCursor, "endCursor");
        Utils.checkNotNull(hasNextPage, "hasNextPage");
        Utils.checkNotNull(hasPreviousPage, "hasPreviousPage");
        Utils.checkNotNull(startCursor, "startCursor");
        this.endCursor = endCursor;
        this.hasNextPage = hasNextPage;
        this.hasPreviousPage = hasPreviousPage;
        this.startCursor = startCursor;
    }
    
    public PageInfo(
            boolean hasNextPage,
            boolean hasPreviousPage) {
        this(Optional.empty(), hasNextPage, hasPreviousPage, Optional.empty());
    }

    /**
     * The cursor that points to the end of the current page, or null if there is no such cursor.
     */
    @JsonIgnore
    public Optional<String> endCursor() {
        return endCursor;
    }

    /**
     * Indicates if there is another page after the current page.
     */
    @JsonIgnore
    public boolean hasNextPage() {
        return hasNextPage;
    }

    /**
     * Indicates if there is a page before the current page.
     */
    @JsonIgnore
    public boolean hasPreviousPage() {
        return hasPreviousPage;
    }

    /**
     * The cursor that points to the start of the current page, or null if there is no such cursor.
     */
    @JsonIgnore
    public Optional<String> startCursor() {
        return startCursor;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The cursor that points to the end of the current page, or null if there is no such cursor.
     */
    public PageInfo withEndCursor(String endCursor) {
        Utils.checkNotNull(endCursor, "endCursor");
        this.endCursor = Optional.ofNullable(endCursor);
        return this;
    }

    /**
     * The cursor that points to the end of the current page, or null if there is no such cursor.
     */
    public PageInfo withEndCursor(Optional<String> endCursor) {
        Utils.checkNotNull(endCursor, "endCursor");
        this.endCursor = endCursor;
        return this;
    }

    /**
     * Indicates if there is another page after the current page.
     */
    public PageInfo withHasNextPage(boolean hasNextPage) {
        Utils.checkNotNull(hasNextPage, "hasNextPage");
        this.hasNextPage = hasNextPage;
        return this;
    }

    /**
     * Indicates if there is a page before the current page.
     */
    public PageInfo withHasPreviousPage(boolean hasPreviousPage) {
        Utils.checkNotNull(hasPreviousPage, "hasPreviousPage");
        this.hasPreviousPage = hasPreviousPage;
        return this;
    }

    /**
     * The cursor that points to the start of the current page, or null if there is no such cursor.
     */
    public PageInfo withStartCursor(String startCursor) {
        Utils.checkNotNull(startCursor, "startCursor");
        this.startCursor = Optional.ofNullable(startCursor);
        return this;
    }

    /**
     * The cursor that points to the start of the current page, or null if there is no such cursor.
     */
    public PageInfo withStartCursor(Optional<String> startCursor) {
        Utils.checkNotNull(startCursor, "startCursor");
        this.startCursor = startCursor;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PageInfo other = (PageInfo) o;
        return 
            Objects.deepEquals(this.endCursor, other.endCursor) &&
            Objects.deepEquals(this.hasNextPage, other.hasNextPage) &&
            Objects.deepEquals(this.hasPreviousPage, other.hasPreviousPage) &&
            Objects.deepEquals(this.startCursor, other.startCursor);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            endCursor,
            hasNextPage,
            hasPreviousPage,
            startCursor);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PageInfo.class,
                "endCursor", endCursor,
                "hasNextPage", hasNextPage,
                "hasPreviousPage", hasPreviousPage,
                "startCursor", startCursor);
    }
    
    public final static class Builder {
 
        private Optional<String> endCursor = Optional.empty();
 
        private Boolean hasNextPage;
 
        private Boolean hasPreviousPage;
 
        private Optional<String> startCursor = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The cursor that points to the end of the current page, or null if there is no such cursor.
         */
        public Builder endCursor(String endCursor) {
            Utils.checkNotNull(endCursor, "endCursor");
            this.endCursor = Optional.ofNullable(endCursor);
            return this;
        }

        /**
         * The cursor that points to the end of the current page, or null if there is no such cursor.
         */
        public Builder endCursor(Optional<String> endCursor) {
            Utils.checkNotNull(endCursor, "endCursor");
            this.endCursor = endCursor;
            return this;
        }

        /**
         * Indicates if there is another page after the current page.
         */
        public Builder hasNextPage(boolean hasNextPage) {
            Utils.checkNotNull(hasNextPage, "hasNextPage");
            this.hasNextPage = hasNextPage;
            return this;
        }

        /**
         * Indicates if there is a page before the current page.
         */
        public Builder hasPreviousPage(boolean hasPreviousPage) {
            Utils.checkNotNull(hasPreviousPage, "hasPreviousPage");
            this.hasPreviousPage = hasPreviousPage;
            return this;
        }

        /**
         * The cursor that points to the start of the current page, or null if there is no such cursor.
         */
        public Builder startCursor(String startCursor) {
            Utils.checkNotNull(startCursor, "startCursor");
            this.startCursor = Optional.ofNullable(startCursor);
            return this;
        }

        /**
         * The cursor that points to the start of the current page, or null if there is no such cursor.
         */
        public Builder startCursor(Optional<String> startCursor) {
            Utils.checkNotNull(startCursor, "startCursor");
            this.startCursor = startCursor;
            return this;
        }
        
        public PageInfo build() {
            return new PageInfo(
                endCursor,
                hasNextPage,
                hasPreviousPage,
                startCursor);
        }
    }
}
