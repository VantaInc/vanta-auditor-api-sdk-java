/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class CustomField {

    @JsonProperty("label")
    private String label;


    @JsonProperty("value")
    private Value value;

    @JsonCreator
    public CustomField(
            @JsonProperty("label") String label,
            @JsonProperty("value") Value value) {
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(value, "value");
        this.label = label;
        this.value = value;
    }

    @JsonIgnore
    public String label() {
        return label;
    }

    @JsonIgnore
    public Value value() {
        return value;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CustomField withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    public CustomField withValue(Value value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomField other = (CustomField) o;
        return 
            Utils.enhancedDeepEquals(this.label, other.label) &&
            Utils.enhancedDeepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            label, value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomField.class,
                "label", label,
                "value", value);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String label;

        private Value value;

        private Builder() {
          // force use of static builder() method
        }


        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }


        public Builder value(Value value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public CustomField build() {

            return new CustomField(
                label, value);
        }

    }
}
