/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vanta.vanta_auditor_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class CreateCustomEvidenceRequestInput {

    /**
     * A set of controls, referenced by id, to map the evidence to
     */
    @JsonProperty("controlIds")
    private List<String> controlIds;

    /**
     * Title for the evidence request
     */
    @JsonProperty("title")
    private String title;

    /**
     * Description for the evidence request
     */
    @JsonProperty("description")
    private String description;

    @JsonProperty("cadence")
    private RecurrenceDuration cadence;

    @JsonProperty("reminderWindow")
    private RecurrenceDuration reminderWindow;

    /**
     * Whether this document contains sensitive data and needs more restrictive read access
     */
    @JsonProperty("isRestricted")
    private boolean isRestricted;

    @JsonCreator
    public CreateCustomEvidenceRequestInput(
            @JsonProperty("controlIds") List<String> controlIds,
            @JsonProperty("title") String title,
            @JsonProperty("description") String description,
            @JsonProperty("cadence") RecurrenceDuration cadence,
            @JsonProperty("reminderWindow") RecurrenceDuration reminderWindow,
            @JsonProperty("isRestricted") boolean isRestricted) {
        Utils.checkNotNull(controlIds, "controlIds");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(cadence, "cadence");
        Utils.checkNotNull(reminderWindow, "reminderWindow");
        Utils.checkNotNull(isRestricted, "isRestricted");
        this.controlIds = controlIds;
        this.title = title;
        this.description = description;
        this.cadence = cadence;
        this.reminderWindow = reminderWindow;
        this.isRestricted = isRestricted;
    }

    /**
     * A set of controls, referenced by id, to map the evidence to
     */
    @JsonIgnore
    public List<String> controlIds() {
        return controlIds;
    }

    /**
     * Title for the evidence request
     */
    @JsonIgnore
    public String title() {
        return title;
    }

    /**
     * Description for the evidence request
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    @JsonIgnore
    public RecurrenceDuration cadence() {
        return cadence;
    }

    @JsonIgnore
    public RecurrenceDuration reminderWindow() {
        return reminderWindow;
    }

    /**
     * Whether this document contains sensitive data and needs more restrictive read access
     */
    @JsonIgnore
    public boolean isRestricted() {
        return isRestricted;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A set of controls, referenced by id, to map the evidence to
     */
    public CreateCustomEvidenceRequestInput withControlIds(List<String> controlIds) {
        Utils.checkNotNull(controlIds, "controlIds");
        this.controlIds = controlIds;
        return this;
    }

    /**
     * Title for the evidence request
     */
    public CreateCustomEvidenceRequestInput withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Description for the evidence request
     */
    public CreateCustomEvidenceRequestInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public CreateCustomEvidenceRequestInput withCadence(RecurrenceDuration cadence) {
        Utils.checkNotNull(cadence, "cadence");
        this.cadence = cadence;
        return this;
    }

    public CreateCustomEvidenceRequestInput withReminderWindow(RecurrenceDuration reminderWindow) {
        Utils.checkNotNull(reminderWindow, "reminderWindow");
        this.reminderWindow = reminderWindow;
        return this;
    }

    /**
     * Whether this document contains sensitive data and needs more restrictive read access
     */
    public CreateCustomEvidenceRequestInput withIsRestricted(boolean isRestricted) {
        Utils.checkNotNull(isRestricted, "isRestricted");
        this.isRestricted = isRestricted;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCustomEvidenceRequestInput other = (CreateCustomEvidenceRequestInput) o;
        return 
            Objects.deepEquals(this.controlIds, other.controlIds) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.cadence, other.cadence) &&
            Objects.deepEquals(this.reminderWindow, other.reminderWindow) &&
            Objects.deepEquals(this.isRestricted, other.isRestricted);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            controlIds,
            title,
            description,
            cadence,
            reminderWindow,
            isRestricted);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCustomEvidenceRequestInput.class,
                "controlIds", controlIds,
                "title", title,
                "description", description,
                "cadence", cadence,
                "reminderWindow", reminderWindow,
                "isRestricted", isRestricted);
    }
    
    public final static class Builder {
 
        private List<String> controlIds;
 
        private String title;
 
        private String description;
 
        private RecurrenceDuration cadence;
 
        private RecurrenceDuration reminderWindow;
 
        private Boolean isRestricted;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A set of controls, referenced by id, to map the evidence to
         */
        public Builder controlIds(List<String> controlIds) {
            Utils.checkNotNull(controlIds, "controlIds");
            this.controlIds = controlIds;
            return this;
        }

        /**
         * Title for the evidence request
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Description for the evidence request
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder cadence(RecurrenceDuration cadence) {
            Utils.checkNotNull(cadence, "cadence");
            this.cadence = cadence;
            return this;
        }

        public Builder reminderWindow(RecurrenceDuration reminderWindow) {
            Utils.checkNotNull(reminderWindow, "reminderWindow");
            this.reminderWindow = reminderWindow;
            return this;
        }

        /**
         * Whether this document contains sensitive data and needs more restrictive read access
         */
        public Builder isRestricted(boolean isRestricted) {
            Utils.checkNotNull(isRestricted, "isRestricted");
            this.isRestricted = isRestricted;
            return this;
        }
        
        public CreateCustomEvidenceRequestInput build() {
            return new CreateCustomEvidenceRequestInput(
                controlIds,
                title,
                description,
                cadence,
                reminderWindow,
                isRestricted);
        }
    }
}

