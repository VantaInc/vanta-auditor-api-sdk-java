/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * ControlOwner
 * 
 * <p>The control's owner.
 */
public class ControlOwner {
    /**
     * Unique identifier for the person.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Name of the person that is shown in product.
     */
    @JsonProperty("displayName")
    private String displayName;

    /**
     * Email address of the person.
     */
    @JsonProperty("emailAddress")
    private String emailAddress;

    @JsonCreator
    public ControlOwner(
            @JsonProperty("id") String id,
            @JsonProperty("displayName") String displayName,
            @JsonProperty("emailAddress") String emailAddress) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.id = id;
        this.displayName = displayName;
        this.emailAddress = emailAddress;
    }

    /**
     * Unique identifier for the person.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Name of the person that is shown in product.
     */
    @JsonIgnore
    public String displayName() {
        return displayName;
    }

    /**
     * Email address of the person.
     */
    @JsonIgnore
    public String emailAddress() {
        return emailAddress;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the person.
     */
    public ControlOwner withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Name of the person that is shown in product.
     */
    public ControlOwner withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * Email address of the person.
     */
    public ControlOwner withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ControlOwner other = (ControlOwner) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.emailAddress, other.emailAddress);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, displayName, emailAddress);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ControlOwner.class,
                "id", id,
                "displayName", displayName,
                "emailAddress", emailAddress);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private String displayName;

        private String emailAddress;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier for the person.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Name of the person that is shown in product.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }


        /**
         * Email address of the person.
         */
        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        public ControlOwner build() {

            return new ControlOwner(
                id, displayName, emailAddress);
        }

    }
}
