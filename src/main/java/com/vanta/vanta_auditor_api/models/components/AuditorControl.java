/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vanta.vanta_auditor_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class AuditorControl {

    /**
     * The control's unique ID.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The control's external ID.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("externalId")
    private Optional<String> externalId;

    /**
     * The control's name.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The control's description.
     */
    @JsonProperty("description")
    private String description;

    @JsonProperty("source")
    private ControlSource source;

    /**
     * The security domains that the control belongs to.
     */
    @JsonProperty("domains")
    private List<String> domains;

    /**
     * The control's owner.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("owner")
    private Optional<? extends Owner> owner;

    /**
     * The control's GDPR role, if the control is a GDPR control.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    private Optional<String> role;

    /**
     * The report standard framework fulfilled by the control.
     */
    @JsonProperty("framework")
    private String framework;

    @JsonCreator
    public AuditorControl(
            @JsonProperty("id") String id,
            @JsonProperty("externalId") Optional<String> externalId,
            @JsonProperty("name") String name,
            @JsonProperty("description") String description,
            @JsonProperty("source") ControlSource source,
            @JsonProperty("domains") List<String> domains,
            @JsonProperty("owner") Optional<? extends Owner> owner,
            @JsonProperty("role") Optional<String> role,
            @JsonProperty("framework") String framework) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(domains, "domains");
        Utils.checkNotNull(owner, "owner");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(framework, "framework");
        this.id = id;
        this.externalId = externalId;
        this.name = name;
        this.description = description;
        this.source = source;
        this.domains = domains;
        this.owner = owner;
        this.role = role;
        this.framework = framework;
    }
    
    public AuditorControl(
            String id,
            String name,
            String description,
            ControlSource source,
            List<String> domains,
            String framework) {
        this(id, Optional.empty(), name, description, source, domains, Optional.empty(), Optional.empty(), framework);
    }

    /**
     * The control's unique ID.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The control's external ID.
     */
    @JsonIgnore
    public Optional<String> externalId() {
        return externalId;
    }

    /**
     * The control's name.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The control's description.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    @JsonIgnore
    public ControlSource source() {
        return source;
    }

    /**
     * The security domains that the control belongs to.
     */
    @JsonIgnore
    public List<String> domains() {
        return domains;
    }

    /**
     * The control's owner.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Owner> owner() {
        return (Optional<Owner>) owner;
    }

    /**
     * The control's GDPR role, if the control is a GDPR control.
     */
    @JsonIgnore
    public Optional<String> role() {
        return role;
    }

    /**
     * The report standard framework fulfilled by the control.
     */
    @JsonIgnore
    public String framework() {
        return framework;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The control's unique ID.
     */
    public AuditorControl withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The control's external ID.
     */
    public AuditorControl withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = Optional.ofNullable(externalId);
        return this;
    }

    /**
     * The control's external ID.
     */
    public AuditorControl withExternalId(Optional<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * The control's name.
     */
    public AuditorControl withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The control's description.
     */
    public AuditorControl withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public AuditorControl withSource(ControlSource source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    /**
     * The security domains that the control belongs to.
     */
    public AuditorControl withDomains(List<String> domains) {
        Utils.checkNotNull(domains, "domains");
        this.domains = domains;
        return this;
    }

    /**
     * The control's owner.
     */
    public AuditorControl withOwner(Owner owner) {
        Utils.checkNotNull(owner, "owner");
        this.owner = Optional.ofNullable(owner);
        return this;
    }

    /**
     * The control's owner.
     */
    public AuditorControl withOwner(Optional<? extends Owner> owner) {
        Utils.checkNotNull(owner, "owner");
        this.owner = owner;
        return this;
    }

    /**
     * The control's GDPR role, if the control is a GDPR control.
     */
    public AuditorControl withRole(String role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }

    /**
     * The control's GDPR role, if the control is a GDPR control.
     */
    public AuditorControl withRole(Optional<String> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    /**
     * The report standard framework fulfilled by the control.
     */
    public AuditorControl withFramework(String framework) {
        Utils.checkNotNull(framework, "framework");
        this.framework = framework;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuditorControl other = (AuditorControl) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.externalId, other.externalId) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.source, other.source) &&
            Objects.deepEquals(this.domains, other.domains) &&
            Objects.deepEquals(this.owner, other.owner) &&
            Objects.deepEquals(this.role, other.role) &&
            Objects.deepEquals(this.framework, other.framework);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            externalId,
            name,
            description,
            source,
            domains,
            owner,
            role,
            framework);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuditorControl.class,
                "id", id,
                "externalId", externalId,
                "name", name,
                "description", description,
                "source", source,
                "domains", domains,
                "owner", owner,
                "role", role,
                "framework", framework);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Optional<String> externalId = Optional.empty();
 
        private String name;
 
        private String description;
 
        private ControlSource source;
 
        private List<String> domains;
 
        private Optional<? extends Owner> owner = Optional.empty();
 
        private Optional<String> role = Optional.empty();
 
        private String framework;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The control's unique ID.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The control's external ID.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        /**
         * The control's external ID.
         */
        public Builder externalId(Optional<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        /**
         * The control's name.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The control's description.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder source(ControlSource source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        /**
         * The security domains that the control belongs to.
         */
        public Builder domains(List<String> domains) {
            Utils.checkNotNull(domains, "domains");
            this.domains = domains;
            return this;
        }

        /**
         * The control's owner.
         */
        public Builder owner(Owner owner) {
            Utils.checkNotNull(owner, "owner");
            this.owner = Optional.ofNullable(owner);
            return this;
        }

        /**
         * The control's owner.
         */
        public Builder owner(Optional<? extends Owner> owner) {
            Utils.checkNotNull(owner, "owner");
            this.owner = owner;
            return this;
        }

        /**
         * The control's GDPR role, if the control is a GDPR control.
         */
        public Builder role(String role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        /**
         * The control's GDPR role, if the control is a GDPR control.
         */
        public Builder role(Optional<String> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        /**
         * The report standard framework fulfilled by the control.
         */
        public Builder framework(String framework) {
            Utils.checkNotNull(framework, "framework");
            this.framework = framework;
            return this;
        }
        
        public AuditorControl build() {
            return new AuditorControl(
                id,
                externalId,
                name,
                description,
                source,
                domains,
                owner,
                role,
                framework);
        }
    }
}

