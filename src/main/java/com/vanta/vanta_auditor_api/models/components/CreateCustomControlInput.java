/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateCustomControlInput {

    /**
     * The external id of the control.
     */
    @JsonProperty("externalId")
    private String externalId;

    /**
     * The name of the control.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The description of the control.
     */
    @JsonProperty("description")
    private String description;

    /**
     * The effective date of the control.
     */
    @JsonProperty("effectiveDate")
    private OffsetDateTime effectiveDate;

    @JsonProperty("category")
    private ControlDomain category;

    /**
     * Framework sections that the control should be mapped to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sections")
    private JsonNullable<? extends List<FrameworkSection>> sections;

    /**
     * The GDPR role of the control, which specifies whether the data is being "collected" or "processed". See the GdprRole enum for possible values.
     * This field should only be included for controls that are to be mapped to the GDPR framework.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    private JsonNullable<? extends Role> role;

    @JsonCreator
    public CreateCustomControlInput(
            @JsonProperty("externalId") String externalId,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") String description,
            @JsonProperty("effectiveDate") OffsetDateTime effectiveDate,
            @JsonProperty("category") ControlDomain category,
            @JsonProperty("sections") JsonNullable<? extends List<FrameworkSection>> sections,
            @JsonProperty("role") JsonNullable<? extends Role> role) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        Utils.checkNotNull(category, "category");
        Utils.checkNotNull(sections, "sections");
        Utils.checkNotNull(role, "role");
        this.externalId = externalId;
        this.name = name;
        this.description = description;
        this.effectiveDate = effectiveDate;
        this.category = category;
        this.sections = sections;
        this.role = role;
    }
    
    public CreateCustomControlInput(
            String externalId,
            String description,
            OffsetDateTime effectiveDate,
            ControlDomain category) {
        this(externalId, Optional.empty(), description, effectiveDate, category, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The external id of the control.
     */
    @JsonIgnore
    public String externalId() {
        return externalId;
    }

    /**
     * The name of the control.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The description of the control.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * The effective date of the control.
     */
    @JsonIgnore
    public OffsetDateTime effectiveDate() {
        return effectiveDate;
    }

    @JsonIgnore
    public ControlDomain category() {
        return category;
    }

    /**
     * Framework sections that the control should be mapped to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<FrameworkSection>> sections() {
        return (JsonNullable<List<FrameworkSection>>) sections;
    }

    /**
     * The GDPR role of the control, which specifies whether the data is being "collected" or "processed". See the GdprRole enum for possible values.
     * This field should only be included for controls that are to be mapped to the GDPR framework.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Role> role() {
        return (JsonNullable<Role>) role;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The external id of the control.
     */
    public CreateCustomControlInput withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * The name of the control.
     */
    public CreateCustomControlInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the control.
     */
    public CreateCustomControlInput withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The description of the control.
     */
    public CreateCustomControlInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The effective date of the control.
     */
    public CreateCustomControlInput withEffectiveDate(OffsetDateTime effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = effectiveDate;
        return this;
    }

    public CreateCustomControlInput withCategory(ControlDomain category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }

    /**
     * Framework sections that the control should be mapped to.
     */
    public CreateCustomControlInput withSections(List<FrameworkSection> sections) {
        Utils.checkNotNull(sections, "sections");
        this.sections = JsonNullable.of(sections);
        return this;
    }

    /**
     * Framework sections that the control should be mapped to.
     */
    public CreateCustomControlInput withSections(JsonNullable<? extends List<FrameworkSection>> sections) {
        Utils.checkNotNull(sections, "sections");
        this.sections = sections;
        return this;
    }

    /**
     * The GDPR role of the control, which specifies whether the data is being "collected" or "processed". See the GdprRole enum for possible values.
     * This field should only be included for controls that are to be mapped to the GDPR framework.
     */
    public CreateCustomControlInput withRole(Role role) {
        Utils.checkNotNull(role, "role");
        this.role = JsonNullable.of(role);
        return this;
    }

    /**
     * The GDPR role of the control, which specifies whether the data is being "collected" or "processed". See the GdprRole enum for possible values.
     * This field should only be included for controls that are to be mapped to the GDPR framework.
     */
    public CreateCustomControlInput withRole(JsonNullable<? extends Role> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCustomControlInput other = (CreateCustomControlInput) o;
        return 
            Objects.deepEquals(this.externalId, other.externalId) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.effectiveDate, other.effectiveDate) &&
            Objects.deepEquals(this.category, other.category) &&
            Objects.deepEquals(this.sections, other.sections) &&
            Objects.deepEquals(this.role, other.role);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            externalId,
            name,
            description,
            effectiveDate,
            category,
            sections,
            role);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCustomControlInput.class,
                "externalId", externalId,
                "name", name,
                "description", description,
                "effectiveDate", effectiveDate,
                "category", category,
                "sections", sections,
                "role", role);
    }
    
    public final static class Builder {
 
        private String externalId;
 
        private Optional<String> name = Optional.empty();
 
        private String description;
 
        private OffsetDateTime effectiveDate;
 
        private ControlDomain category;
 
        private JsonNullable<? extends List<FrameworkSection>> sections = JsonNullable.undefined();
 
        private JsonNullable<? extends Role> role = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The external id of the control.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        /**
         * The name of the control.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the control.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The description of the control.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The effective date of the control.
         */
        public Builder effectiveDate(OffsetDateTime effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = effectiveDate;
            return this;
        }

        public Builder category(ControlDomain category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }

        /**
         * Framework sections that the control should be mapped to.
         */
        public Builder sections(List<FrameworkSection> sections) {
            Utils.checkNotNull(sections, "sections");
            this.sections = JsonNullable.of(sections);
            return this;
        }

        /**
         * Framework sections that the control should be mapped to.
         */
        public Builder sections(JsonNullable<? extends List<FrameworkSection>> sections) {
            Utils.checkNotNull(sections, "sections");
            this.sections = sections;
            return this;
        }

        /**
         * The GDPR role of the control, which specifies whether the data is being "collected" or "processed". See the GdprRole enum for possible values.
         * This field should only be included for controls that are to be mapped to the GDPR framework.
         */
        public Builder role(Role role) {
            Utils.checkNotNull(role, "role");
            this.role = JsonNullable.of(role);
            return this;
        }

        /**
         * The GDPR role of the control, which specifies whether the data is being "collected" or "processed". See the GdprRole enum for possible values.
         * This field should only be included for controls that are to be mapped to the GDPR framework.
         */
        public Builder role(JsonNullable<? extends Role> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }
        
        public CreateCustomControlInput build() {
            return new CreateCustomControlInput(
                externalId,
                name,
                description,
                effectiveDate,
                category,
                sections,
                role);
        }
    }
}
