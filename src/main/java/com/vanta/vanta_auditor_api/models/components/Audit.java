/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Audit {

    /**
     * The unique identifier for the audit.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The domain name of the customer organization being audited (e.g. vanta.com)
     */
    @JsonProperty("customerOrganizationName")
    private String customerOrganizationName;

    /**
     * The human readable name of the customer organization being audited (e.g. Vanta)
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("customerDisplayName")
    private Optional<String> customerDisplayName;

    /**
     * The uuid of the customer organization being audited
     */
    @JsonProperty("customerOrganizationId")
    private String customerOrganizationId;

    /**
     * The start of the audit window. This is also when data collection for audit starts.
     */
    @JsonProperty("auditStartDate")
    private OffsetDateTime auditStartDate;

    /**
     * The end of the audit window.
     */
    @JsonProperty("auditEndDate")
    private OffsetDateTime auditEndDate;

    /**
     * Timestamp at which auditors gain access to the audit. Occurs before the audit window begins
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("earlyAccessStartsDate")
    private Optional<OffsetDateTime> earlyAccessStartsDate;

    /**
     * The name of the framework for the audit
     */
    @JsonProperty("framework")
    private String framework;

    /**
     * Emails of auditors with access to audit
     */
    @JsonProperty("allowAuditorEmails")
    private List<String> allowAuditorEmails;

    /**
     * Set to true if all auditors in audit firm have access
     */
    @JsonProperty("allowAllAuditors")
    private boolean allowAllAuditors;

    /**
     * Timestamp when the audit was deleted
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("deletionDate")
    private Optional<OffsetDateTime> deletionDate;

    /**
     * Timestamp when the audit was created
     */
    @JsonProperty("creationDate")
    private OffsetDateTime creationDate;

    /**
     * Timestamp when the audit was updated
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("modificationDate")
    private Optional<OffsetDateTime> modificationDate;

    /**
     * Timestamp when the audit was marked completed, and report was uploaded
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("completionDate")
    private Optional<OffsetDateTime> completionDate;

    @JsonCreator
    public Audit(
            @JsonProperty("id") String id,
            @JsonProperty("customerOrganizationName") String customerOrganizationName,
            @JsonProperty("customerDisplayName") Optional<String> customerDisplayName,
            @JsonProperty("customerOrganizationId") String customerOrganizationId,
            @JsonProperty("auditStartDate") OffsetDateTime auditStartDate,
            @JsonProperty("auditEndDate") OffsetDateTime auditEndDate,
            @JsonProperty("earlyAccessStartsDate") Optional<OffsetDateTime> earlyAccessStartsDate,
            @JsonProperty("framework") String framework,
            @JsonProperty("allowAuditorEmails") List<String> allowAuditorEmails,
            @JsonProperty("allowAllAuditors") boolean allowAllAuditors,
            @JsonProperty("deletionDate") Optional<OffsetDateTime> deletionDate,
            @JsonProperty("creationDate") OffsetDateTime creationDate,
            @JsonProperty("modificationDate") Optional<OffsetDateTime> modificationDate,
            @JsonProperty("completionDate") Optional<OffsetDateTime> completionDate) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(customerOrganizationName, "customerOrganizationName");
        Utils.checkNotNull(customerDisplayName, "customerDisplayName");
        Utils.checkNotNull(customerOrganizationId, "customerOrganizationId");
        Utils.checkNotNull(auditStartDate, "auditStartDate");
        Utils.checkNotNull(auditEndDate, "auditEndDate");
        Utils.checkNotNull(earlyAccessStartsDate, "earlyAccessStartsDate");
        Utils.checkNotNull(framework, "framework");
        Utils.checkNotNull(allowAuditorEmails, "allowAuditorEmails");
        Utils.checkNotNull(allowAllAuditors, "allowAllAuditors");
        Utils.checkNotNull(deletionDate, "deletionDate");
        Utils.checkNotNull(creationDate, "creationDate");
        Utils.checkNotNull(modificationDate, "modificationDate");
        Utils.checkNotNull(completionDate, "completionDate");
        this.id = id;
        this.customerOrganizationName = customerOrganizationName;
        this.customerDisplayName = customerDisplayName;
        this.customerOrganizationId = customerOrganizationId;
        this.auditStartDate = auditStartDate;
        this.auditEndDate = auditEndDate;
        this.earlyAccessStartsDate = earlyAccessStartsDate;
        this.framework = framework;
        this.allowAuditorEmails = allowAuditorEmails;
        this.allowAllAuditors = allowAllAuditors;
        this.deletionDate = deletionDate;
        this.creationDate = creationDate;
        this.modificationDate = modificationDate;
        this.completionDate = completionDate;
    }
    
    public Audit(
            String id,
            String customerOrganizationName,
            String customerOrganizationId,
            OffsetDateTime auditStartDate,
            OffsetDateTime auditEndDate,
            String framework,
            List<String> allowAuditorEmails,
            boolean allowAllAuditors,
            OffsetDateTime creationDate) {
        this(id, customerOrganizationName, Optional.empty(), customerOrganizationId, auditStartDate, auditEndDate, Optional.empty(), framework, allowAuditorEmails, allowAllAuditors, Optional.empty(), creationDate, Optional.empty(), Optional.empty());
    }

    /**
     * The unique identifier for the audit.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The domain name of the customer organization being audited (e.g. vanta.com)
     */
    @JsonIgnore
    public String customerOrganizationName() {
        return customerOrganizationName;
    }

    /**
     * The human readable name of the customer organization being audited (e.g. Vanta)
     */
    @JsonIgnore
    public Optional<String> customerDisplayName() {
        return customerDisplayName;
    }

    /**
     * The uuid of the customer organization being audited
     */
    @JsonIgnore
    public String customerOrganizationId() {
        return customerOrganizationId;
    }

    /**
     * The start of the audit window. This is also when data collection for audit starts.
     */
    @JsonIgnore
    public OffsetDateTime auditStartDate() {
        return auditStartDate;
    }

    /**
     * The end of the audit window.
     */
    @JsonIgnore
    public OffsetDateTime auditEndDate() {
        return auditEndDate;
    }

    /**
     * Timestamp at which auditors gain access to the audit. Occurs before the audit window begins
     */
    @JsonIgnore
    public Optional<OffsetDateTime> earlyAccessStartsDate() {
        return earlyAccessStartsDate;
    }

    /**
     * The name of the framework for the audit
     */
    @JsonIgnore
    public String framework() {
        return framework;
    }

    /**
     * Emails of auditors with access to audit
     */
    @JsonIgnore
    public List<String> allowAuditorEmails() {
        return allowAuditorEmails;
    }

    /**
     * Set to true if all auditors in audit firm have access
     */
    @JsonIgnore
    public boolean allowAllAuditors() {
        return allowAllAuditors;
    }

    /**
     * Timestamp when the audit was deleted
     */
    @JsonIgnore
    public Optional<OffsetDateTime> deletionDate() {
        return deletionDate;
    }

    /**
     * Timestamp when the audit was created
     */
    @JsonIgnore
    public OffsetDateTime creationDate() {
        return creationDate;
    }

    /**
     * Timestamp when the audit was updated
     */
    @JsonIgnore
    public Optional<OffsetDateTime> modificationDate() {
        return modificationDate;
    }

    /**
     * Timestamp when the audit was marked completed, and report was uploaded
     */
    @JsonIgnore
    public Optional<OffsetDateTime> completionDate() {
        return completionDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The unique identifier for the audit.
     */
    public Audit withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The domain name of the customer organization being audited (e.g. vanta.com)
     */
    public Audit withCustomerOrganizationName(String customerOrganizationName) {
        Utils.checkNotNull(customerOrganizationName, "customerOrganizationName");
        this.customerOrganizationName = customerOrganizationName;
        return this;
    }

    /**
     * The human readable name of the customer organization being audited (e.g. Vanta)
     */
    public Audit withCustomerDisplayName(String customerDisplayName) {
        Utils.checkNotNull(customerDisplayName, "customerDisplayName");
        this.customerDisplayName = Optional.ofNullable(customerDisplayName);
        return this;
    }

    /**
     * The human readable name of the customer organization being audited (e.g. Vanta)
     */
    public Audit withCustomerDisplayName(Optional<String> customerDisplayName) {
        Utils.checkNotNull(customerDisplayName, "customerDisplayName");
        this.customerDisplayName = customerDisplayName;
        return this;
    }

    /**
     * The uuid of the customer organization being audited
     */
    public Audit withCustomerOrganizationId(String customerOrganizationId) {
        Utils.checkNotNull(customerOrganizationId, "customerOrganizationId");
        this.customerOrganizationId = customerOrganizationId;
        return this;
    }

    /**
     * The start of the audit window. This is also when data collection for audit starts.
     */
    public Audit withAuditStartDate(OffsetDateTime auditStartDate) {
        Utils.checkNotNull(auditStartDate, "auditStartDate");
        this.auditStartDate = auditStartDate;
        return this;
    }

    /**
     * The end of the audit window.
     */
    public Audit withAuditEndDate(OffsetDateTime auditEndDate) {
        Utils.checkNotNull(auditEndDate, "auditEndDate");
        this.auditEndDate = auditEndDate;
        return this;
    }

    /**
     * Timestamp at which auditors gain access to the audit. Occurs before the audit window begins
     */
    public Audit withEarlyAccessStartsDate(OffsetDateTime earlyAccessStartsDate) {
        Utils.checkNotNull(earlyAccessStartsDate, "earlyAccessStartsDate");
        this.earlyAccessStartsDate = Optional.ofNullable(earlyAccessStartsDate);
        return this;
    }

    /**
     * Timestamp at which auditors gain access to the audit. Occurs before the audit window begins
     */
    public Audit withEarlyAccessStartsDate(Optional<OffsetDateTime> earlyAccessStartsDate) {
        Utils.checkNotNull(earlyAccessStartsDate, "earlyAccessStartsDate");
        this.earlyAccessStartsDate = earlyAccessStartsDate;
        return this;
    }

    /**
     * The name of the framework for the audit
     */
    public Audit withFramework(String framework) {
        Utils.checkNotNull(framework, "framework");
        this.framework = framework;
        return this;
    }

    /**
     * Emails of auditors with access to audit
     */
    public Audit withAllowAuditorEmails(List<String> allowAuditorEmails) {
        Utils.checkNotNull(allowAuditorEmails, "allowAuditorEmails");
        this.allowAuditorEmails = allowAuditorEmails;
        return this;
    }

    /**
     * Set to true if all auditors in audit firm have access
     */
    public Audit withAllowAllAuditors(boolean allowAllAuditors) {
        Utils.checkNotNull(allowAllAuditors, "allowAllAuditors");
        this.allowAllAuditors = allowAllAuditors;
        return this;
    }

    /**
     * Timestamp when the audit was deleted
     */
    public Audit withDeletionDate(OffsetDateTime deletionDate) {
        Utils.checkNotNull(deletionDate, "deletionDate");
        this.deletionDate = Optional.ofNullable(deletionDate);
        return this;
    }

    /**
     * Timestamp when the audit was deleted
     */
    public Audit withDeletionDate(Optional<OffsetDateTime> deletionDate) {
        Utils.checkNotNull(deletionDate, "deletionDate");
        this.deletionDate = deletionDate;
        return this;
    }

    /**
     * Timestamp when the audit was created
     */
    public Audit withCreationDate(OffsetDateTime creationDate) {
        Utils.checkNotNull(creationDate, "creationDate");
        this.creationDate = creationDate;
        return this;
    }

    /**
     * Timestamp when the audit was updated
     */
    public Audit withModificationDate(OffsetDateTime modificationDate) {
        Utils.checkNotNull(modificationDate, "modificationDate");
        this.modificationDate = Optional.ofNullable(modificationDate);
        return this;
    }

    /**
     * Timestamp when the audit was updated
     */
    public Audit withModificationDate(Optional<OffsetDateTime> modificationDate) {
        Utils.checkNotNull(modificationDate, "modificationDate");
        this.modificationDate = modificationDate;
        return this;
    }

    /**
     * Timestamp when the audit was marked completed, and report was uploaded
     */
    public Audit withCompletionDate(OffsetDateTime completionDate) {
        Utils.checkNotNull(completionDate, "completionDate");
        this.completionDate = Optional.ofNullable(completionDate);
        return this;
    }

    /**
     * Timestamp when the audit was marked completed, and report was uploaded
     */
    public Audit withCompletionDate(Optional<OffsetDateTime> completionDate) {
        Utils.checkNotNull(completionDate, "completionDate");
        this.completionDate = completionDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Audit other = (Audit) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.customerOrganizationName, other.customerOrganizationName) &&
            Objects.deepEquals(this.customerDisplayName, other.customerDisplayName) &&
            Objects.deepEquals(this.customerOrganizationId, other.customerOrganizationId) &&
            Objects.deepEquals(this.auditStartDate, other.auditStartDate) &&
            Objects.deepEquals(this.auditEndDate, other.auditEndDate) &&
            Objects.deepEquals(this.earlyAccessStartsDate, other.earlyAccessStartsDate) &&
            Objects.deepEquals(this.framework, other.framework) &&
            Objects.deepEquals(this.allowAuditorEmails, other.allowAuditorEmails) &&
            Objects.deepEquals(this.allowAllAuditors, other.allowAllAuditors) &&
            Objects.deepEquals(this.deletionDate, other.deletionDate) &&
            Objects.deepEquals(this.creationDate, other.creationDate) &&
            Objects.deepEquals(this.modificationDate, other.modificationDate) &&
            Objects.deepEquals(this.completionDate, other.completionDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            customerOrganizationName,
            customerDisplayName,
            customerOrganizationId,
            auditStartDate,
            auditEndDate,
            earlyAccessStartsDate,
            framework,
            allowAuditorEmails,
            allowAllAuditors,
            deletionDate,
            creationDate,
            modificationDate,
            completionDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Audit.class,
                "id", id,
                "customerOrganizationName", customerOrganizationName,
                "customerDisplayName", customerDisplayName,
                "customerOrganizationId", customerOrganizationId,
                "auditStartDate", auditStartDate,
                "auditEndDate", auditEndDate,
                "earlyAccessStartsDate", earlyAccessStartsDate,
                "framework", framework,
                "allowAuditorEmails", allowAuditorEmails,
                "allowAllAuditors", allowAllAuditors,
                "deletionDate", deletionDate,
                "creationDate", creationDate,
                "modificationDate", modificationDate,
                "completionDate", completionDate);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String customerOrganizationName;
 
        private Optional<String> customerDisplayName = Optional.empty();
 
        private String customerOrganizationId;
 
        private OffsetDateTime auditStartDate;
 
        private OffsetDateTime auditEndDate;
 
        private Optional<OffsetDateTime> earlyAccessStartsDate = Optional.empty();
 
        private String framework;
 
        private List<String> allowAuditorEmails;
 
        private Boolean allowAllAuditors;
 
        private Optional<OffsetDateTime> deletionDate = Optional.empty();
 
        private OffsetDateTime creationDate;
 
        private Optional<OffsetDateTime> modificationDate = Optional.empty();
 
        private Optional<OffsetDateTime> completionDate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier for the audit.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The domain name of the customer organization being audited (e.g. vanta.com)
         */
        public Builder customerOrganizationName(String customerOrganizationName) {
            Utils.checkNotNull(customerOrganizationName, "customerOrganizationName");
            this.customerOrganizationName = customerOrganizationName;
            return this;
        }

        /**
         * The human readable name of the customer organization being audited (e.g. Vanta)
         */
        public Builder customerDisplayName(String customerDisplayName) {
            Utils.checkNotNull(customerDisplayName, "customerDisplayName");
            this.customerDisplayName = Optional.ofNullable(customerDisplayName);
            return this;
        }

        /**
         * The human readable name of the customer organization being audited (e.g. Vanta)
         */
        public Builder customerDisplayName(Optional<String> customerDisplayName) {
            Utils.checkNotNull(customerDisplayName, "customerDisplayName");
            this.customerDisplayName = customerDisplayName;
            return this;
        }

        /**
         * The uuid of the customer organization being audited
         */
        public Builder customerOrganizationId(String customerOrganizationId) {
            Utils.checkNotNull(customerOrganizationId, "customerOrganizationId");
            this.customerOrganizationId = customerOrganizationId;
            return this;
        }

        /**
         * The start of the audit window. This is also when data collection for audit starts.
         */
        public Builder auditStartDate(OffsetDateTime auditStartDate) {
            Utils.checkNotNull(auditStartDate, "auditStartDate");
            this.auditStartDate = auditStartDate;
            return this;
        }

        /**
         * The end of the audit window.
         */
        public Builder auditEndDate(OffsetDateTime auditEndDate) {
            Utils.checkNotNull(auditEndDate, "auditEndDate");
            this.auditEndDate = auditEndDate;
            return this;
        }

        /**
         * Timestamp at which auditors gain access to the audit. Occurs before the audit window begins
         */
        public Builder earlyAccessStartsDate(OffsetDateTime earlyAccessStartsDate) {
            Utils.checkNotNull(earlyAccessStartsDate, "earlyAccessStartsDate");
            this.earlyAccessStartsDate = Optional.ofNullable(earlyAccessStartsDate);
            return this;
        }

        /**
         * Timestamp at which auditors gain access to the audit. Occurs before the audit window begins
         */
        public Builder earlyAccessStartsDate(Optional<OffsetDateTime> earlyAccessStartsDate) {
            Utils.checkNotNull(earlyAccessStartsDate, "earlyAccessStartsDate");
            this.earlyAccessStartsDate = earlyAccessStartsDate;
            return this;
        }

        /**
         * The name of the framework for the audit
         */
        public Builder framework(String framework) {
            Utils.checkNotNull(framework, "framework");
            this.framework = framework;
            return this;
        }

        /**
         * Emails of auditors with access to audit
         */
        public Builder allowAuditorEmails(List<String> allowAuditorEmails) {
            Utils.checkNotNull(allowAuditorEmails, "allowAuditorEmails");
            this.allowAuditorEmails = allowAuditorEmails;
            return this;
        }

        /**
         * Set to true if all auditors in audit firm have access
         */
        public Builder allowAllAuditors(boolean allowAllAuditors) {
            Utils.checkNotNull(allowAllAuditors, "allowAllAuditors");
            this.allowAllAuditors = allowAllAuditors;
            return this;
        }

        /**
         * Timestamp when the audit was deleted
         */
        public Builder deletionDate(OffsetDateTime deletionDate) {
            Utils.checkNotNull(deletionDate, "deletionDate");
            this.deletionDate = Optional.ofNullable(deletionDate);
            return this;
        }

        /**
         * Timestamp when the audit was deleted
         */
        public Builder deletionDate(Optional<OffsetDateTime> deletionDate) {
            Utils.checkNotNull(deletionDate, "deletionDate");
            this.deletionDate = deletionDate;
            return this;
        }

        /**
         * Timestamp when the audit was created
         */
        public Builder creationDate(OffsetDateTime creationDate) {
            Utils.checkNotNull(creationDate, "creationDate");
            this.creationDate = creationDate;
            return this;
        }

        /**
         * Timestamp when the audit was updated
         */
        public Builder modificationDate(OffsetDateTime modificationDate) {
            Utils.checkNotNull(modificationDate, "modificationDate");
            this.modificationDate = Optional.ofNullable(modificationDate);
            return this;
        }

        /**
         * Timestamp when the audit was updated
         */
        public Builder modificationDate(Optional<OffsetDateTime> modificationDate) {
            Utils.checkNotNull(modificationDate, "modificationDate");
            this.modificationDate = modificationDate;
            return this;
        }

        /**
         * Timestamp when the audit was marked completed, and report was uploaded
         */
        public Builder completionDate(OffsetDateTime completionDate) {
            Utils.checkNotNull(completionDate, "completionDate");
            this.completionDate = Optional.ofNullable(completionDate);
            return this;
        }

        /**
         * Timestamp when the audit was marked completed, and report was uploaded
         */
        public Builder completionDate(Optional<OffsetDateTime> completionDate) {
            Utils.checkNotNull(completionDate, "completionDate");
            this.completionDate = completionDate;
            return this;
        }
        
        public Audit build() {
            return new Audit(
                id,
                customerOrganizationName,
                customerDisplayName,
                customerOrganizationId,
                auditStartDate,
                auditEndDate,
                earlyAccessStartsDate,
                framework,
                allowAuditorEmails,
                allowAllAuditors,
                deletionDate,
                creationDate,
                modificationDate,
                completionDate);
        }
    }
}
