/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vanta.vanta_auditor_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.vanta.vanta_auditor_api.utils.SpeakeasyMetadata;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class Security {

    @SpeakeasyMetadata("security:scheme=true,type=http,subtype=bearer,name=Authorization")
    private String bearerAuth;

    @JsonCreator
    public Security(
            String bearerAuth) {
        Utils.checkNotNull(bearerAuth, "bearerAuth");
        this.bearerAuth = bearerAuth;
    }

    @JsonIgnore
    public String bearerAuth() {
        return bearerAuth;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Security withBearerAuth(String bearerAuth) {
        Utils.checkNotNull(bearerAuth, "bearerAuth");
        this.bearerAuth = bearerAuth;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Security other = (Security) o;
        return 
            Objects.deepEquals(this.bearerAuth, other.bearerAuth);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bearerAuth);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Security.class,
                "bearerAuth", bearerAuth);
    }
    
    public final static class Builder {
 
        private String bearerAuth;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bearerAuth(String bearerAuth) {
            Utils.checkNotNull(bearerAuth, "bearerAuth");
            this.bearerAuth = bearerAuth;
            return this;
        }
        
        public Security build() {
            return new Security(
                bearerAuth);
        }
    }
}

