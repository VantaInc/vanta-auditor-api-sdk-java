/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Evidence {

    /**
     * Vanta internal reference to evidence
     */
    @JsonProperty("id")
    private String id;

    /**
     * This is a static UUID to map Audit Firm controls to Vanta controls
     */
    @JsonProperty("externalId")
    private String externalId;

    @JsonProperty("status")
    private AuditEvidenceState status;

    /**
     * Mutable name for evidence. Not guaranteed to be unique.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The date this Audit Evidence was deleted
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("deletionDate")
    private Optional<OffsetDateTime> deletionDate;

    /**
     * The date this Audit Evidence was created
     */
    @JsonProperty("creationDate")
    private OffsetDateTime creationDate;

    /**
     * Point in time that status was last updated
     */
    @JsonProperty("statusUpdatedDate")
    private OffsetDateTime statusUpdatedDate;

    /**
     * The outcome of the automated test run, for Test-type evidence
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("testStatus")
    private Optional<String> testStatus;

    @JsonProperty("evidenceType")
    private AuditEvidenceType evidenceType;

    /**
     * Unique identifier for evidence
     */
    @JsonProperty("evidenceId")
    private String evidenceId;

    /**
     * The controls associated to this evidence
     */
    @JsonProperty("relatedControls")
    private List<EvidenceControl> relatedControls;

    /**
     * The description for the evidence. It will be set to null if the evidence is deleted
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonCreator
    public Evidence(
            @JsonProperty("id") String id,
            @JsonProperty("externalId") String externalId,
            @JsonProperty("status") AuditEvidenceState status,
            @JsonProperty("name") String name,
            @JsonProperty("deletionDate") Optional<OffsetDateTime> deletionDate,
            @JsonProperty("creationDate") OffsetDateTime creationDate,
            @JsonProperty("statusUpdatedDate") OffsetDateTime statusUpdatedDate,
            @JsonProperty("testStatus") Optional<String> testStatus,
            @JsonProperty("evidenceType") AuditEvidenceType evidenceType,
            @JsonProperty("evidenceId") String evidenceId,
            @JsonProperty("relatedControls") List<EvidenceControl> relatedControls,
            @JsonProperty("description") Optional<String> description) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(deletionDate, "deletionDate");
        Utils.checkNotNull(creationDate, "creationDate");
        Utils.checkNotNull(statusUpdatedDate, "statusUpdatedDate");
        Utils.checkNotNull(testStatus, "testStatus");
        Utils.checkNotNull(evidenceType, "evidenceType");
        Utils.checkNotNull(evidenceId, "evidenceId");
        Utils.checkNotNull(relatedControls, "relatedControls");
        Utils.checkNotNull(description, "description");
        this.id = id;
        this.externalId = externalId;
        this.status = status;
        this.name = name;
        this.deletionDate = deletionDate;
        this.creationDate = creationDate;
        this.statusUpdatedDate = statusUpdatedDate;
        this.testStatus = testStatus;
        this.evidenceType = evidenceType;
        this.evidenceId = evidenceId;
        this.relatedControls = relatedControls;
        this.description = description;
    }
    
    public Evidence(
            String id,
            String externalId,
            AuditEvidenceState status,
            String name,
            OffsetDateTime creationDate,
            OffsetDateTime statusUpdatedDate,
            AuditEvidenceType evidenceType,
            String evidenceId,
            List<EvidenceControl> relatedControls) {
        this(id, externalId, status, name, Optional.empty(), creationDate, statusUpdatedDate, Optional.empty(), evidenceType, evidenceId, relatedControls, Optional.empty());
    }

    /**
     * Vanta internal reference to evidence
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * This is a static UUID to map Audit Firm controls to Vanta controls
     */
    @JsonIgnore
    public String externalId() {
        return externalId;
    }

    @JsonIgnore
    public AuditEvidenceState status() {
        return status;
    }

    /**
     * Mutable name for evidence. Not guaranteed to be unique.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The date this Audit Evidence was deleted
     */
    @JsonIgnore
    public Optional<OffsetDateTime> deletionDate() {
        return deletionDate;
    }

    /**
     * The date this Audit Evidence was created
     */
    @JsonIgnore
    public OffsetDateTime creationDate() {
        return creationDate;
    }

    /**
     * Point in time that status was last updated
     */
    @JsonIgnore
    public OffsetDateTime statusUpdatedDate() {
        return statusUpdatedDate;
    }

    /**
     * The outcome of the automated test run, for Test-type evidence
     */
    @JsonIgnore
    public Optional<String> testStatus() {
        return testStatus;
    }

    @JsonIgnore
    public AuditEvidenceType evidenceType() {
        return evidenceType;
    }

    /**
     * Unique identifier for evidence
     */
    @JsonIgnore
    public String evidenceId() {
        return evidenceId;
    }

    /**
     * The controls associated to this evidence
     */
    @JsonIgnore
    public List<EvidenceControl> relatedControls() {
        return relatedControls;
    }

    /**
     * The description for the evidence. It will be set to null if the evidence is deleted
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Vanta internal reference to evidence
     */
    public Evidence withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * This is a static UUID to map Audit Firm controls to Vanta controls
     */
    public Evidence withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    public Evidence withStatus(AuditEvidenceState status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Mutable name for evidence. Not guaranteed to be unique.
     */
    public Evidence withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The date this Audit Evidence was deleted
     */
    public Evidence withDeletionDate(OffsetDateTime deletionDate) {
        Utils.checkNotNull(deletionDate, "deletionDate");
        this.deletionDate = Optional.ofNullable(deletionDate);
        return this;
    }

    /**
     * The date this Audit Evidence was deleted
     */
    public Evidence withDeletionDate(Optional<OffsetDateTime> deletionDate) {
        Utils.checkNotNull(deletionDate, "deletionDate");
        this.deletionDate = deletionDate;
        return this;
    }

    /**
     * The date this Audit Evidence was created
     */
    public Evidence withCreationDate(OffsetDateTime creationDate) {
        Utils.checkNotNull(creationDate, "creationDate");
        this.creationDate = creationDate;
        return this;
    }

    /**
     * Point in time that status was last updated
     */
    public Evidence withStatusUpdatedDate(OffsetDateTime statusUpdatedDate) {
        Utils.checkNotNull(statusUpdatedDate, "statusUpdatedDate");
        this.statusUpdatedDate = statusUpdatedDate;
        return this;
    }

    /**
     * The outcome of the automated test run, for Test-type evidence
     */
    public Evidence withTestStatus(String testStatus) {
        Utils.checkNotNull(testStatus, "testStatus");
        this.testStatus = Optional.ofNullable(testStatus);
        return this;
    }

    /**
     * The outcome of the automated test run, for Test-type evidence
     */
    public Evidence withTestStatus(Optional<String> testStatus) {
        Utils.checkNotNull(testStatus, "testStatus");
        this.testStatus = testStatus;
        return this;
    }

    public Evidence withEvidenceType(AuditEvidenceType evidenceType) {
        Utils.checkNotNull(evidenceType, "evidenceType");
        this.evidenceType = evidenceType;
        return this;
    }

    /**
     * Unique identifier for evidence
     */
    public Evidence withEvidenceId(String evidenceId) {
        Utils.checkNotNull(evidenceId, "evidenceId");
        this.evidenceId = evidenceId;
        return this;
    }

    /**
     * The controls associated to this evidence
     */
    public Evidence withRelatedControls(List<EvidenceControl> relatedControls) {
        Utils.checkNotNull(relatedControls, "relatedControls");
        this.relatedControls = relatedControls;
        return this;
    }

    /**
     * The description for the evidence. It will be set to null if the evidence is deleted
     */
    public Evidence withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description for the evidence. It will be set to null if the evidence is deleted
     */
    public Evidence withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Evidence other = (Evidence) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.externalId, other.externalId) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.deletionDate, other.deletionDate) &&
            Objects.deepEquals(this.creationDate, other.creationDate) &&
            Objects.deepEquals(this.statusUpdatedDate, other.statusUpdatedDate) &&
            Objects.deepEquals(this.testStatus, other.testStatus) &&
            Objects.deepEquals(this.evidenceType, other.evidenceType) &&
            Objects.deepEquals(this.evidenceId, other.evidenceId) &&
            Objects.deepEquals(this.relatedControls, other.relatedControls) &&
            Objects.deepEquals(this.description, other.description);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            externalId,
            status,
            name,
            deletionDate,
            creationDate,
            statusUpdatedDate,
            testStatus,
            evidenceType,
            evidenceId,
            relatedControls,
            description);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Evidence.class,
                "id", id,
                "externalId", externalId,
                "status", status,
                "name", name,
                "deletionDate", deletionDate,
                "creationDate", creationDate,
                "statusUpdatedDate", statusUpdatedDate,
                "testStatus", testStatus,
                "evidenceType", evidenceType,
                "evidenceId", evidenceId,
                "relatedControls", relatedControls,
                "description", description);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String externalId;
 
        private AuditEvidenceState status;
 
        private String name;
 
        private Optional<OffsetDateTime> deletionDate = Optional.empty();
 
        private OffsetDateTime creationDate;
 
        private OffsetDateTime statusUpdatedDate;
 
        private Optional<String> testStatus = Optional.empty();
 
        private AuditEvidenceType evidenceType;
 
        private String evidenceId;
 
        private List<EvidenceControl> relatedControls;
 
        private Optional<String> description = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Vanta internal reference to evidence
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * This is a static UUID to map Audit Firm controls to Vanta controls
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        public Builder status(AuditEvidenceState status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Mutable name for evidence. Not guaranteed to be unique.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The date this Audit Evidence was deleted
         */
        public Builder deletionDate(OffsetDateTime deletionDate) {
            Utils.checkNotNull(deletionDate, "deletionDate");
            this.deletionDate = Optional.ofNullable(deletionDate);
            return this;
        }

        /**
         * The date this Audit Evidence was deleted
         */
        public Builder deletionDate(Optional<OffsetDateTime> deletionDate) {
            Utils.checkNotNull(deletionDate, "deletionDate");
            this.deletionDate = deletionDate;
            return this;
        }

        /**
         * The date this Audit Evidence was created
         */
        public Builder creationDate(OffsetDateTime creationDate) {
            Utils.checkNotNull(creationDate, "creationDate");
            this.creationDate = creationDate;
            return this;
        }

        /**
         * Point in time that status was last updated
         */
        public Builder statusUpdatedDate(OffsetDateTime statusUpdatedDate) {
            Utils.checkNotNull(statusUpdatedDate, "statusUpdatedDate");
            this.statusUpdatedDate = statusUpdatedDate;
            return this;
        }

        /**
         * The outcome of the automated test run, for Test-type evidence
         */
        public Builder testStatus(String testStatus) {
            Utils.checkNotNull(testStatus, "testStatus");
            this.testStatus = Optional.ofNullable(testStatus);
            return this;
        }

        /**
         * The outcome of the automated test run, for Test-type evidence
         */
        public Builder testStatus(Optional<String> testStatus) {
            Utils.checkNotNull(testStatus, "testStatus");
            this.testStatus = testStatus;
            return this;
        }

        public Builder evidenceType(AuditEvidenceType evidenceType) {
            Utils.checkNotNull(evidenceType, "evidenceType");
            this.evidenceType = evidenceType;
            return this;
        }

        /**
         * Unique identifier for evidence
         */
        public Builder evidenceId(String evidenceId) {
            Utils.checkNotNull(evidenceId, "evidenceId");
            this.evidenceId = evidenceId;
            return this;
        }

        /**
         * The controls associated to this evidence
         */
        public Builder relatedControls(List<EvidenceControl> relatedControls) {
            Utils.checkNotNull(relatedControls, "relatedControls");
            this.relatedControls = relatedControls;
            return this;
        }

        /**
         * The description for the evidence. It will be set to null if the evidence is deleted
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description for the evidence. It will be set to null if the evidence is deleted
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }
        
        public Evidence build() {
            return new Evidence(
                id,
                externalId,
                status,
                name,
                deletionDate,
                creationDate,
                statusUpdatedDate,
                testStatus,
                evidenceType,
                evidenceId,
                relatedControls,
                description);
        }
    }
}
