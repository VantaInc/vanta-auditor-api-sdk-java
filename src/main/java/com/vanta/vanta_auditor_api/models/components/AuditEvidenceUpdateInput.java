/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class AuditEvidenceUpdateInput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusUpdate")
    private Optional<? extends StatusUpdate> statusUpdate;

    @JsonCreator
    public AuditEvidenceUpdateInput(
            @JsonProperty("statusUpdate") Optional<? extends StatusUpdate> statusUpdate) {
        Utils.checkNotNull(statusUpdate, "statusUpdate");
        this.statusUpdate = statusUpdate;
    }
    
    public AuditEvidenceUpdateInput() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StatusUpdate> statusUpdate() {
        return (Optional<StatusUpdate>) statusUpdate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AuditEvidenceUpdateInput withStatusUpdate(StatusUpdate statusUpdate) {
        Utils.checkNotNull(statusUpdate, "statusUpdate");
        this.statusUpdate = Optional.ofNullable(statusUpdate);
        return this;
    }

    public AuditEvidenceUpdateInput withStatusUpdate(Optional<? extends StatusUpdate> statusUpdate) {
        Utils.checkNotNull(statusUpdate, "statusUpdate");
        this.statusUpdate = statusUpdate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuditEvidenceUpdateInput other = (AuditEvidenceUpdateInput) o;
        return 
            Objects.deepEquals(this.statusUpdate, other.statusUpdate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            statusUpdate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuditEvidenceUpdateInput.class,
                "statusUpdate", statusUpdate);
    }
    
    public final static class Builder {
 
        private Optional<? extends StatusUpdate> statusUpdate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder statusUpdate(StatusUpdate statusUpdate) {
            Utils.checkNotNull(statusUpdate, "statusUpdate");
            this.statusUpdate = Optional.ofNullable(statusUpdate);
            return this;
        }

        public Builder statusUpdate(Optional<? extends StatusUpdate> statusUpdate) {
            Utils.checkNotNull(statusUpdate, "statusUpdate");
            this.statusUpdate = statusUpdate;
            return this;
        }
        
        public AuditEvidenceUpdateInput build() {
            return new AuditEvidenceUpdateInput(
                statusUpdate);
        }
    }
}
