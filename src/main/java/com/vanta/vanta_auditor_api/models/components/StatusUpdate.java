/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class StatusUpdate {

    /**
     * Email of the auditor who changed the state
     */
    @JsonProperty("auditorEmail")
    private String auditorEmail;

    @JsonProperty("stateTransition")
    private AuditorEnabledStateTransition stateTransition;

    @JsonCreator
    public StatusUpdate(
            @JsonProperty("auditorEmail") String auditorEmail,
            @JsonProperty("stateTransition") AuditorEnabledStateTransition stateTransition) {
        Utils.checkNotNull(auditorEmail, "auditorEmail");
        Utils.checkNotNull(stateTransition, "stateTransition");
        this.auditorEmail = auditorEmail;
        this.stateTransition = stateTransition;
    }

    /**
     * Email of the auditor who changed the state
     */
    @JsonIgnore
    public String auditorEmail() {
        return auditorEmail;
    }

    @JsonIgnore
    public AuditorEnabledStateTransition stateTransition() {
        return stateTransition;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Email of the auditor who changed the state
     */
    public StatusUpdate withAuditorEmail(String auditorEmail) {
        Utils.checkNotNull(auditorEmail, "auditorEmail");
        this.auditorEmail = auditorEmail;
        return this;
    }

    public StatusUpdate withStateTransition(AuditorEnabledStateTransition stateTransition) {
        Utils.checkNotNull(stateTransition, "stateTransition");
        this.stateTransition = stateTransition;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StatusUpdate other = (StatusUpdate) o;
        return 
            Objects.deepEquals(this.auditorEmail, other.auditorEmail) &&
            Objects.deepEquals(this.stateTransition, other.stateTransition);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            auditorEmail,
            stateTransition);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StatusUpdate.class,
                "auditorEmail", auditorEmail,
                "stateTransition", stateTransition);
    }
    
    public final static class Builder {
 
        private String auditorEmail;
 
        private AuditorEnabledStateTransition stateTransition;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Email of the auditor who changed the state
         */
        public Builder auditorEmail(String auditorEmail) {
            Utils.checkNotNull(auditorEmail, "auditorEmail");
            this.auditorEmail = auditorEmail;
            return this;
        }

        public Builder stateTransition(AuditorEnabledStateTransition stateTransition) {
            Utils.checkNotNull(stateTransition, "stateTransition");
            this.stateTransition = stateTransition;
            return this;
        }
        
        public StatusUpdate build() {
            return new StatusUpdate(
                auditorEmail,
                stateTransition);
        }
    }
}
