/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vanta.vanta_auditor_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class AddAuditorInput {

    /**
     * Email of the new user.
     */
    @JsonProperty("email")
    private String email;

    /**
     * First name of the new user.
     */
    @JsonProperty("givenName")
    private String givenName;

    /**
     * Last name of the new user.
     */
    @JsonProperty("familyName")
    private String familyName;

    @JsonCreator
    public AddAuditorInput(
            @JsonProperty("email") String email,
            @JsonProperty("givenName") String givenName,
            @JsonProperty("familyName") String familyName) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(givenName, "givenName");
        Utils.checkNotNull(familyName, "familyName");
        this.email = email;
        this.givenName = givenName;
        this.familyName = familyName;
    }

    /**
     * Email of the new user.
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * First name of the new user.
     */
    @JsonIgnore
    public String givenName() {
        return givenName;
    }

    /**
     * Last name of the new user.
     */
    @JsonIgnore
    public String familyName() {
        return familyName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Email of the new user.
     */
    public AddAuditorInput withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * First name of the new user.
     */
    public AddAuditorInput withGivenName(String givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = givenName;
        return this;
    }

    /**
     * Last name of the new user.
     */
    public AddAuditorInput withFamilyName(String familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = familyName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddAuditorInput other = (AddAuditorInput) o;
        return 
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.givenName, other.givenName) &&
            Objects.deepEquals(this.familyName, other.familyName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            email,
            givenName,
            familyName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddAuditorInput.class,
                "email", email,
                "givenName", givenName,
                "familyName", familyName);
    }
    
    public final static class Builder {
 
        private String email;
 
        private String givenName;
 
        private String familyName;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Email of the new user.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * First name of the new user.
         */
        public Builder givenName(String givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = givenName;
            return this;
        }

        /**
         * Last name of the new user.
         */
        public Builder familyName(String familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = familyName;
            return this;
        }
        
        public AddAuditorInput build() {
            return new AddAuditorInput(
                email,
                givenName,
                familyName);
        }
    }
}

