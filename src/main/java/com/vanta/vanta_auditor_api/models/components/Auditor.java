/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vanta.vanta_auditor_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class Auditor {

    @JsonProperty("id")
    private String id;

    /**
     * The unique identifier for the organization.
     */
    @JsonProperty("organizationId")
    private String organizationId;

    /**
     * The email address of the auditor.
     */
    @JsonProperty("email")
    private String email;

    /**
     * The given name (first name) of the auditor.
     */
    @JsonProperty("givenName")
    private String givenName;

    /**
     * The family name (last name) of the auditor.
     */
    @JsonProperty("familyName")
    private String familyName;

    @JsonCreator
    public Auditor(
            @JsonProperty("id") String id,
            @JsonProperty("organizationId") String organizationId,
            @JsonProperty("email") String email,
            @JsonProperty("givenName") String givenName,
            @JsonProperty("familyName") String familyName) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(givenName, "givenName");
        Utils.checkNotNull(familyName, "familyName");
        this.id = id;
        this.organizationId = organizationId;
        this.email = email;
        this.givenName = givenName;
        this.familyName = familyName;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The unique identifier for the organization.
     */
    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    /**
     * The email address of the auditor.
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * The given name (first name) of the auditor.
     */
    @JsonIgnore
    public String givenName() {
        return givenName;
    }

    /**
     * The family name (last name) of the auditor.
     */
    @JsonIgnore
    public String familyName() {
        return familyName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Auditor withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The unique identifier for the organization.
     */
    public Auditor withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * The email address of the auditor.
     */
    public Auditor withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The given name (first name) of the auditor.
     */
    public Auditor withGivenName(String givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = givenName;
        return this;
    }

    /**
     * The family name (last name) of the auditor.
     */
    public Auditor withFamilyName(String familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = familyName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Auditor other = (Auditor) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.organizationId, other.organizationId) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.givenName, other.givenName) &&
            Objects.deepEquals(this.familyName, other.familyName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            organizationId,
            email,
            givenName,
            familyName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Auditor.class,
                "id", id,
                "organizationId", organizationId,
                "email", email,
                "givenName", givenName,
                "familyName", familyName);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String organizationId;
 
        private String email;
 
        private String givenName;
 
        private String familyName;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The unique identifier for the organization.
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        /**
         * The email address of the auditor.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The given name (first name) of the auditor.
         */
        public Builder givenName(String givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = givenName;
            return this;
        }

        /**
         * The family name (last name) of the auditor.
         */
        public Builder familyName(String familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = familyName;
            return this;
        }
        
        public Auditor build() {
            return new Auditor(
                id,
                organizationId,
                email,
                givenName,
                familyName);
        }
    }
}

