/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.vanta.vanta_auditor_api.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vanta.vanta_auditor_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class EvidenceControl {
    /**
     * Name of control associated to this evidence
     */
    @JsonProperty("name")
    private String name;

    /**
     * A list sections associated to the control
     */
    @JsonProperty("sectionNames")
    private List<String> sectionNames;

    @JsonCreator
    public EvidenceControl(
            @JsonProperty("name") String name,
            @JsonProperty("sectionNames") List<String> sectionNames) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sectionNames, "sectionNames");
        this.name = name;
        this.sectionNames = sectionNames;
    }

    /**
     * Name of control associated to this evidence
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * A list sections associated to the control
     */
    @JsonIgnore
    public List<String> sectionNames() {
        return sectionNames;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Name of control associated to this evidence
     */
    public EvidenceControl withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A list sections associated to the control
     */
    public EvidenceControl withSectionNames(List<String> sectionNames) {
        Utils.checkNotNull(sectionNames, "sectionNames");
        this.sectionNames = sectionNames;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EvidenceControl other = (EvidenceControl) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.sectionNames, other.sectionNames);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, sectionNames);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EvidenceControl.class,
                "name", name,
                "sectionNames", sectionNames);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private List<String> sectionNames;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Name of control associated to this evidence
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * A list sections associated to the control
         */
        public Builder sectionNames(List<String> sectionNames) {
            Utils.checkNotNull(sectionNames, "sectionNames");
            this.sectionNames = sectionNames;
            return this;
        }

        public EvidenceControl build() {

            return new EvidenceControl(
                name, sectionNames);
        }

    }
}
